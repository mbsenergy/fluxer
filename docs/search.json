[{"path":"https://mbsenergy.github.io/fluxer/articles/data_query_example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Querying Data with Filters","text":"vignette demonstrates query PostgreSQL database using specific date filters country filters data table. use DBI RPostgres packages connect PostgreSQL database retrieve filtered data.","code":""},{"path":"https://mbsenergy.github.io/fluxer/articles/data_query_example.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Querying Data with Filters","text":"begin, need connect PostgreSQL database using DBI package. need valid connection PostgreSQL database work.","code":"library(DBI) library(RPostgres)  # Connect to your PostgreSQL database con = DBI::dbConnect(   RPostgres::Postgres(),   host = Sys.getenv('PG_FLUX_HOST'),   port = Sys.getenv('PG_FLUX_PORT'),   dbname = Sys.getenv('PG_FLUX_DBNAME'),   user = Sys.getenv('PG_FLUX_USER'),   password = Sys.getenv('PG_FLUX_PSW'),   sslmode = \"require\"   )"},{"path":"https://mbsenergy.github.io/fluxer/articles/data_query_example.html","id":"define-the-query-function","dir":"Articles","previous_headings":"","what":"Define the Query Function","title":"Querying Data with Filters","text":"function retrieves data two dates filters based vector country codes. function constructs SQL query dynamically based provided input parameters.","code":"query_data <- function(start_date, end_date, country_vector, con) {   # Create a string for the IN clause   country_filter <- paste0(\"'\", country_vector, \"'\", collapse = \", \")    # Construct the SQL query   query <- sprintf('SELECT * FROM \"%s\" WHERE \"%s\" BETWEEN \\'%s\\' AND \\'%s\\'                      AND \"%s\" IN (%s)',                     \"TS01_entsoe_dam_prices\",   # Table name (quoted)                    \"DATE\",  # Date column name (quoted)                    start_date,                     end_date,                    \"COUNTRY\",  # Country column name (quoted)                    country_filter)  # Formatted country vector    cat(crayon::green(query))  # Using green color for printing    # Execute the query and fetch the data   result <- DBI::dbGetQuery(con, query)    return(result) }"},{"path":"https://mbsenergy.github.io/fluxer/articles/data_query_example.html","id":"example-usage","dir":"Articles","previous_headings":"","what":"Example Usage","title":"Querying Data with Filters","text":"example use query_data() function query TS01_entsoe_dam_prices table data two dates list country codes.","code":"# Define the date range start_date <- '2019-01-01' end_date <- '2024-03-31'  # Define the country codes country_vector <- c('Austria', 'France', 'Italy')  # Query the data result <- query_data(start_date, end_date, country_vector, con)  # View the result head(result)"},{"path":"https://mbsenergy.github.io/fluxer/articles/data_query_example.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Querying Data with Filters","text":"vignette demonstrated query data PostgreSQL database using specific date ranges country filters. can modify date range country filter suit specific needs. Don’t forget disconnect database ’re done.","code":"dbDisconnect(con)"},{"path":"https://mbsenergy.github.io/fluxer/articles/entsoe_data_processing.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"DAM Prices Retrieval and Analysis","text":"vignette demonstrates retrieve analyze Day-Ahead Market (DAM) prices different countries date ranges using api_entsoe_dam_prices() entsoe_dam_prices() functions. cover: 1. Retrieving raw DAM prices data using API method. 2. Analyzing plotting DAM prices given country date range.","code":""},{"path":"https://mbsenergy.github.io/fluxer/articles/entsoe_data_processing.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"DAM Prices Retrieval and Analysis","text":"first step load necessary packages. use data.table efficient data manipulation, magrittr piping, ggplot2 plotting, custom package fluxer API integration.","code":"box::use(data.table[...]) box::use(fluxer[...])"},{"path":"https://mbsenergy.github.io/fluxer/articles/entsoe_data_processing.html","id":"api-method-for-retrieving-dam-prices","dir":"Articles","previous_headings":"","what":"1. API Method for Retrieving DAM Prices","title":"DAM Prices Retrieval and Analysis","text":"start using api_entsoe_dam_prices function retrieve raw DAM prices specific country date range. example, retrieve data Czech Republic January 4, 2024, January 6, 2024. function api_entsoe_dam_prices takes country, start date, end date arguments returns raw DAM prices data. raw data printed inspection.","code":"country <- \"Czech Republic\" from_data <- '2024-01-04' to_data <- '2024-01-06' # api_key = Sys.getenv('ENTSOE_KEY')  # Uncomment and provide API key if needed  dam_prices <- api_entsoe_dam_prices(country, from_data, to_data) print(dam_prices)"},{"path":"https://mbsenergy.github.io/fluxer/articles/entsoe_data_processing.html","id":"raw-dam-prices","dir":"Articles","previous_headings":"","what":"1.1 Raw DAM Prices","title":"DAM Prices Retrieval and Analysis","text":"start using api_entsoe_dam_prices function retrieve raw DAM prices specific country date range. example, retrieve data Czech Republic January 4, 2024, January 6, 2024. function api_entsoe_dam_prices takes country, start date, end date arguments returns raw DAM prices data. raw data printed inspection.","code":"country <- \"Czech Republic\" from_data <- '2024-01-04' to_data <- '2024-01-06' # api_key = Sys.getenv('ENTSOE_KEY')  # Uncomment and provide API key if needed  dam_prices <- api_entsoe_dam_prices(country, from_data, to_data) print(dam_prices)"},{"path":"https://mbsenergy.github.io/fluxer/articles/entsoe_data_processing.html","id":"processed-dam-prices","dir":"Articles","previous_headings":"","what":"1.2 Processed DAM Prices","title":"DAM Prices Retrieval and Analysis","text":"Next, retrieve process DAM prices Spain longer period, January 4, 2024, February 8, 2024, using entsoe_dam_prices function. function allows us process raw data optionally visualize . step, entsoe_dam_prices() function retrieves data also processes creates plot plot argument set TRUE.","code":"country <- \"Spain\" from_data <- '2024-01-04' to_data <- '2024-02-08' # api_key = Sys.getenv('ENTSOE_KEY')  # Uncomment and provide API key if needed  dam_prices <- entsoe_dam_prices(country, from_data, to_data, verbose = TRUE, plot = TRUE) print(dam_prices)"},{"path":"https://mbsenergy.github.io/fluxer/articles/entsoe_data_processing.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"DAM Prices Retrieval and Analysis","text":"vignette, demonstrated retrieve raw processed DAM prices different countries using api_entsoe_dam_prices() entsoe_dam_prices() functions. Analyze data plotting DAM prices specific date range. can modify parameters country, start date, end date retrieve analyze DAM prices regions periods. Make sure handle API keys securely using environment variables (Sys.getenv('ENTSOE_KEY')), especially deploying production environments.","code":""},{"path":"https://mbsenergy.github.io/fluxer/articles/entsoe_data_processing.html","id":"additional-notes","dir":"Articles","previous_headings":"","what":"Additional Notes","title":"DAM Prices Retrieval and Analysis","text":"entsoe_dam_prices() function includes optional arguments like verbose plot detailed output visualizations. working large datasets, consider using data.table functions efficient data manipulation.","code":""},{"path":"https://mbsenergy.github.io/fluxer/articles/gme_offers_data_processing.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"GME Offers Data Processing","text":"vignette demonstrates download process GME (Gestore dei Mercati Energetici) offers data MGP (Mercato Giornaliero di Produzione) MSD (Mercato dei Servizi di Dispacciamento). data retrieved remote FTP server processed clean datasets. code divided two parts: 1. MGP Offers: Download process MGP offers. 2. MSD Offers: Download process MSD offers.","code":""},{"path":"https://mbsenergy.github.io/fluxer/articles/gme_offers_data_processing.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"GME Offers Data Processing","text":"first define parameters required downloading processing files. data types, FTP credentials, output directory set follows:","code":"library(data.table) library(fluxer) # Set the parameters for both MGP and MSD n <- 2  # Number of files to process  data_type_mgp <- 'MGP' data_type_msd <- 'MSD'  username <- \"PIASARACENO\" password <- \"18N15C9R\" output_dir <- \"inst/data\""},{"path":"https://mbsenergy.github.io/fluxer/articles/gme_offers_data_processing.html","id":"mgp-offers","dir":"Articles","previous_headings":"","what":"1. MGP Offers","title":"GME Offers Data Processing","text":"use function gme_offers_get_files() list available MGP files GME folder. select last n files processing. download process data selected MGP files using function gme_download_offers_file(). downloaded data cleaned combined single dataset.","code":"# Get MGP offers files available at GME folder gme_mgp_offers_files <- gme_offers_get_files(data_type = data_type_mgp,                                               output_dir = output_dir,                                               username = username,                                               password = password)  # Select the last n files last_n_files <- tail(gme_mgp_offers_files, n) print(last_n_files) list_mgp_offers <- lapply(last_n_files, function(file) {     tryCatch({         # Call gme_download_offers_file with explicit arguments         gme_download_offers_file(             filename = file,             data_type = data_type_mgp,             output_dir = output_dir,             username = username,             password = password,             raw = FALSE         )     }, error = function(e) {         # In case of an error, return NULL         message(\"Error processing file: \", file, \" - \", e$message)         return(NULL)     }) })  # Combine the downloaded MGP offers into a single data.table dt_mgp_offers <- rbindlist(list_mgp_offers, fill = TRUE) print(dt_mgp_offers)"},{"path":"https://mbsenergy.github.io/fluxer/articles/gme_offers_data_processing.html","id":"get-available-files","dir":"Articles","previous_headings":"","what":"1.1 Get Available Files","title":"GME Offers Data Processing","text":"use function gme_offers_get_files() list available MGP files GME folder. select last n files processing.","code":"# Get MGP offers files available at GME folder gme_mgp_offers_files <- gme_offers_get_files(data_type = data_type_mgp,                                               output_dir = output_dir,                                               username = username,                                               password = password)  # Select the last n files last_n_files <- tail(gme_mgp_offers_files, n) print(last_n_files)"},{"path":"https://mbsenergy.github.io/fluxer/articles/gme_offers_data_processing.html","id":"download-and-clean-data","dir":"Articles","previous_headings":"","what":"1.2 Download and Clean Data","title":"GME Offers Data Processing","text":"download process data selected MGP files using function gme_download_offers_file(). downloaded data cleaned combined single dataset.","code":"list_mgp_offers <- lapply(last_n_files, function(file) {     tryCatch({         # Call gme_download_offers_file with explicit arguments         gme_download_offers_file(             filename = file,             data_type = data_type_mgp,             output_dir = output_dir,             username = username,             password = password,             raw = FALSE         )     }, error = function(e) {         # In case of an error, return NULL         message(\"Error processing file: \", file, \" - \", e$message)         return(NULL)     }) })  # Combine the downloaded MGP offers into a single data.table dt_mgp_offers <- rbindlist(list_mgp_offers, fill = TRUE) print(dt_mgp_offers)"},{"path":"https://mbsenergy.github.io/fluxer/articles/gme_offers_data_processing.html","id":"msd-offers","dir":"Articles","previous_headings":"","what":"2. MSD Offers","title":"GME Offers Data Processing","text":"Similar MGP process, retrieve available MSD offers files select last n files processing. download clean MSD offers data manner MGP offers data.","code":"library(data.table) library(fluxer) # Get MSD offers files available at GME folder gme_msd_offers_files <- gme_offers_get_files(data_type = data_type_msd,                                               output_dir = output_dir,                                               username = username,                                               password = password)  # Select the last n files last_n_files_msd <- tail(gme_msd_offers_files, n) print(last_n_files_msd) list_msd_offers <- lapply(last_n_files_msd, function(file) {     tryCatch({         # Call gme_download_offers_file with explicit arguments         gme_download_offers_file(             filename = file,             data_type = data_type_msd,             output_dir = output_dir,             username = username,             password = password,             raw = FALSE         )     }, error = function(e) {         # In case of an error, return NULL         message(\"Error processing file: \", file, \" - \", e$message)         return(NULL)     }) })  # Combine the downloaded MSD offers into a single data.table dt_msd_offers <- rbindlist(list_msd_offers) print(dt_msd_offers)"},{"path":"https://mbsenergy.github.io/fluxer/articles/gme_offers_data_processing.html","id":"get-available-files-1","dir":"Articles","previous_headings":"","what":"2.1 Get Available Files","title":"GME Offers Data Processing","text":"Similar MGP process, retrieve available MSD offers files select last n files processing.","code":"library(data.table) library(fluxer) # Get MSD offers files available at GME folder gme_msd_offers_files <- gme_offers_get_files(data_type = data_type_msd,                                               output_dir = output_dir,                                               username = username,                                               password = password)  # Select the last n files last_n_files_msd <- tail(gme_msd_offers_files, n) print(last_n_files_msd)"},{"path":"https://mbsenergy.github.io/fluxer/articles/gme_offers_data_processing.html","id":"download-and-clean-data-1","dir":"Articles","previous_headings":"","what":"2.2 Download and Clean Data","title":"GME Offers Data Processing","text":"download clean MSD offers data manner MGP offers data.","code":"list_msd_offers <- lapply(last_n_files_msd, function(file) {     tryCatch({         # Call gme_download_offers_file with explicit arguments         gme_download_offers_file(             filename = file,             data_type = data_type_msd,             output_dir = output_dir,             username = username,             password = password,             raw = FALSE         )     }, error = function(e) {         # In case of an error, return NULL         message(\"Error processing file: \", file, \" - \", e$message)         return(NULL)     }) })  # Combine the downloaded MSD offers into a single data.table dt_msd_offers <- rbindlist(list_msd_offers) print(dt_msd_offers)"},{"path":"https://mbsenergy.github.io/fluxer/articles/gme_offers_data_processing.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"GME Offers Data Processing","text":"vignette demonstrated download process GME offers data MGP MSD. using FTP credentials defining necessary parameters, data cleaned combined two datasets: one MGP offers one MSD offers. can customize number files process adjusting parameter n modify data processing functions meet specific needs. Don’t forget handle errors gracefully case file fails download process.","code":""},{"path":"https://mbsenergy.github.io/fluxer/articles/gme_offers_data_processing.html","id":"additional-notes","dir":"Articles","previous_headings":"","what":"Additional Notes","title":"GME Offers Data Processing","text":"Make sure replace FTP username password actual credentials. data saved directory defined output_dir, inst/data default. can modify gme_offers_get_files() gme_download_offers_file() functions include additional functionality error handling needed.","code":""},{"path":"https://mbsenergy.github.io/fluxer/articles/gme_prices_data_processing.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"GME Prices Data Processing","text":"vignette demonstrates download process GME (Gestore dei Mercati Energetici) price data MGP (Mercato Giornaliero di Produzione) MSD (Mercato dei Servizi di Dispacciamento). data retrieved remote FTP server processed clean datasets. code divided two parts: 1. MGP Prices: Download process MGP prices. 2. MSD Prices: Download process MSD prices.","code":""},{"path":"https://mbsenergy.github.io/fluxer/articles/gme_prices_data_processing.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"GME Prices Data Processing","text":"first define parameters required downloading processing files. data types, FTP credentials, output directory set follows:","code":"# Set the parameters for both MGP and MSD n <- 2  # Number of files to process  data_type_mgp <- 'MGP' data_type_msd <- 'MSD'  username <- \"PIASARACENO\" password <- \"18N15C9R\" output_dir <- \"inst/data\""},{"path":"https://mbsenergy.github.io/fluxer/articles/gme_prices_data_processing.html","id":"mgp-prices","dir":"Articles","previous_headings":"","what":"1. MGP Prices","title":"GME Prices Data Processing","text":"use function gme_prices_get_files() list available MGP price files GME folder. select last n files processing.","code":"library(data.table) library(fluxer) # Get MGP prices files available at GME folder gme_mgp_prices_files <- gme_prices_get_files(data_type = data_type_mgp,                                               output_dir = output_dir,                                               username = username,                                               password = password)  # Select the last n files last_n_files_mgp <- tail(gme_mgp_prices_files, n) print(last_n_files_mgp)"},{"path":"https://mbsenergy.github.io/fluxer/articles/gme_prices_data_processing.html","id":"get-available-files","dir":"Articles","previous_headings":"","what":"1.1 Get Available Files","title":"GME Prices Data Processing","text":"use function gme_prices_get_files() list available MGP price files GME folder. select last n files processing.","code":"library(data.table) library(fluxer) # Get MGP prices files available at GME folder gme_mgp_prices_files <- gme_prices_get_files(data_type = data_type_mgp,                                               output_dir = output_dir,                                               username = username,                                               password = password)  # Select the last n files last_n_files_mgp <- tail(gme_mgp_prices_files, n) print(last_n_files_mgp)"},{"path":"https://mbsenergy.github.io/fluxer/articles/gme_prices_data_processing.html","id":"download-and-clean-data","dir":"Articles","previous_headings":"","what":"1.2 Download and Clean Data","title":"GME Prices Data Processing","text":"download process data selected MGP price files using function gme_download_prices_file(). downloaded data cleaned combined single dataset.","code":"list_mgp_prices <- lapply(last_n_files_mgp, function(file) {     tryCatch({         # Call gme_download_prices_file with explicit arguments         gme_download_prices_file(             filename = file,             data_type = data_type_mgp,             output_dir = output_dir,             username = username,             password = password,             raw = FALSE         )     }, error = function(e) {         # In case of an error, return NULL         message(\"Error processing file: \", file, \" - \", e$message)         return(NULL)     }) })  # Combine the downloaded MGP prices into a single data.table dt_mgp_prices <- rbindlist(list_mgp_prices, fill = TRUE) print(dt_mgp_prices)"},{"path":"https://mbsenergy.github.io/fluxer/articles/gme_prices_data_processing.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"GME Prices Data Processing","text":"vignette demonstrated download process GME prices data MGP MSD. using FTP credentials defining necessary parameters, data cleaned combined two datasets: one MGP prices one MSD prices. can customize number files process adjusting parameter n modify data processing functions meet specific needs. Don’t forget handle errors gracefully case file fails download process.","code":""},{"path":[]},{"path":"https://mbsenergy.github.io/fluxer/articles/gme_prices_data_processing.html","id":"additional-notes-1","dir":"Articles","previous_headings":"","what":"Additional Notes","title":"GME Prices Data Processing","text":"Make sure replace FTP username password actual credentials. data saved directory defined output_dir, inst/data default. can modify gme_download_prices_file() function include additional functionality error handling needed.","code":""},{"path":"https://mbsenergy.github.io/fluxer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alejandro Abraham. Author, maintainer.","code":""},{"path":"https://mbsenergy.github.io/fluxer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Abraham (2025). fluxer: FLUX Collection Functions Utilities. R package version 0.7.0, https://mbsenergy.github.io/fluxer/.","code":"@Manual{,   title = {fluxer: FLUX Collection of Functions and Utilities},   author = {Alejandro Abraham},   year = {2025},   note = {R package version 0.7.0},   url = {https://mbsenergy.github.io/fluxer/}, }"},{"path":"https://mbsenergy.github.io/fluxer/index.html","id":"fluxer-","dir":"","previous_headings":"","what":"FLUX Collection of Functions and Utilities","title":"FLUX Collection of Functions and Utilities","text":"FLUX collection functions utilities","code":""},{"path":"https://mbsenergy.github.io/fluxer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"FLUX Collection of Functions and Utilities","text":"Install package using remotes:","code":"install.packages(\"remotes\") remotes::install_github(\"mbsenergy/eikondata\")"},{"path":[]},{"path":"https://mbsenergy.github.io/fluxer/index.html","id":"functions","dir":"","previous_headings":"Develop","what":"Functions","title":"FLUX Collection of Functions and Utilities","text":"Remember document functions using roxygen-like code, naming importing dependencies correctly testing . - Use roxygen2 documentation (#' @description, #' @param, #' @return, #' @export, etc.). - Ensure proper naming conventions dependency management (Imports: DESCRIPTION).","code":"#' @title Dataset x #' @description Brief description of x. #' @format A data frame with n rows and m columns. \"x\""},{"path":"https://mbsenergy.github.io/fluxer/index.html","id":"add-datasets","dir":"","previous_headings":"Develop","what":"Add datasets","title":"FLUX Collection of Functions and Utilities","text":"Load create dataset R. use usethis::use_data(x). stored data/x.rda. Remember create documentation R directory named x.R","code":""},{"path":"https://mbsenergy.github.io/fluxer/index.html","id":"build-the-package","dir":"","previous_headings":"","what":"Build the package","title":"FLUX Collection of Functions and Utilities","text":"","code":"devtools::document() devtools::build()  ## If needed testing devtools::load_all()"},{"path":"https://mbsenergy.github.io/fluxer/reference/agsi_gas_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch Gas Data from AGSI API — agsi_gas_data","title":"Fetch Gas Data from AGSI API — agsi_gas_data","text":"function retrieves gas data specified country date range using AGSI API. results returned data.table detailed gas storage information.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/agsi_gas_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch Gas Data from AGSI API — agsi_gas_data","text":"","code":"agsi_gas_data(country, from_date, to_date, api_key = Sys.getenv(\"AGSI_KEY\"))"},{"path":"https://mbsenergy.github.io/fluxer/reference/agsi_gas_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch Gas Data from AGSI API — agsi_gas_data","text":"country Character. Country code data fetched (e.g., \"\"). from_date Character. Start date data retrieval \"YYYY-MM-DD\" format. to_date Character. End date data retrieval \"YYYY-MM-DD\" format. api_key Character. API key authenticating AGSI API.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/agsi_gas_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch Gas Data from AGSI API — agsi_gas_data","text":"data.table containing gas data specified country date range. API request fails, empty data.table returned.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/agsi_gas_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch Gas Data from AGSI API — agsi_gas_data","text":"function fetches data AGSI API, iterating multiple pages necessary. consolidates results single data.table analysis.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/agsi_gas_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch Gas Data from AGSI API — agsi_gas_data","text":"","code":"if (FALSE) { # \\dontrun{ api_key <- 'your_api_key_here' country <- \"IT\" from_date <- \"2023-10-01\" to_date <- \"2023-12-01\" data <- fetch_country_data(api_key, country, from_date, to_date) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/alba_download_data_gas.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and process gas price data from GEEO Energy — alba_download_data_gas","title":"Download and process gas price data from GEEO Energy — alba_download_data_gas","text":"function logs GEEO Energy website, downloads gas price data, processes data using process_xlsx function, deletes downloaded file processing.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/alba_download_data_gas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and process gas price data from GEEO Energy — alba_download_data_gas","text":"","code":"alba_download_data_gas(   from_date,   to_date,   type,   output_dir,   username,   password,   raw = FALSE )"},{"path":"https://mbsenergy.github.io/fluxer/reference/alba_download_data_gas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and process gas price data from GEEO Energy — alba_download_data_gas","text":"from_date Date object character string \"YYYY-MM-DD\" format specifying start date filtering data. to_date Date object character string \"YYYY-MM-DD\" format specifying end date filtering data. output_dir character string specifying output directory file saved. username character string specifying username login. password character string specifying password login.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/alba_download_data_gas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and process gas price data from GEEO Energy — alba_download_data_gas","text":"data.table containing processed gas price data.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/alba_download_data_gas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download and process gas price data from GEEO Energy — alba_download_data_gas","text":"function logs GEEO Energy platform, retrieves gas price data Excel file, processes extract relevant data within specified date range, deletes file processing.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/alba_download_data_power.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and Process ALBA Data — alba_download_data_power","title":"Download and Process ALBA Data — alba_download_data_power","text":"function logs ALBA energy platform, downloads data file, processes content multiple Excel sheets.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/alba_download_data_power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and Process ALBA Data — alba_download_data_power","text":"","code":"alba_download_data_power(   from_date,   to_date,   type,   output_dir,   username,   password,   raw = FALSE )"},{"path":"https://mbsenergy.github.io/fluxer/reference/alba_download_data_power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and Process ALBA Data — alba_download_data_power","text":"from_date Date object indicating start date data processing (directly used code can added filtering). to_date Date object indicating end date data processing (directly used code can added filtering). output_dir string specifying directory downloaded file saved. username string containing username authentication. password string containing password authentication.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/alba_download_data_power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and Process ALBA Data — alba_download_data_power","text":"list containing: sheet_data_list list data.table objects, one sheet Excel file. combined_data combined data.table containing data Excel sheets.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/alba_download_data_power.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download and Process ALBA Data — alba_download_data_power","text":"function performs following steps: Logs ALBA energy platform using provided credentials. Downloads Excel file containing data. Processes sheet Excel file: Reads data. Transforms long format. Removes rows missing values. Adds metadata sheet name. Combines data sheets single data.table easier analysis.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/alba_download_data_power.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and Process ALBA Data — alba_download_data_power","text":"","code":"if (FALSE) { # \\dontrun{ # Define parameters from_date <- as.Date(\"2023-01-01\") to_date <- as.Date(\"2023-12-31\") output_dir <- \"data\" username <- \"your_username\" password <- \"your_password\"  # Call the function result <- alba_download_data(from_date, to_date, output_dir, username, password)  # Access individual sheet data sheet_data_list <- result$sheet_data_list  # Access combined data combined_data <- result$combined_data } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/api_entsoe_dam_prices.html","id":null,"dir":"Reference","previous_headings":"","what":"INTERNAL - API Retrieve Day-Ahead Market Prices for a Specific Country — api_entsoe_dam_prices","title":"INTERNAL - API Retrieve Day-Ahead Market Prices for a Specific Country — api_entsoe_dam_prices","text":"function retrieves Day-Ahead Market (DAM) prices specific country ENTSOE Transparency Platform API. function fetches market price data given time range country, processes data, formats data.table.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/api_entsoe_dam_prices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"INTERNAL - API Retrieve Day-Ahead Market Prices for a Specific Country — api_entsoe_dam_prices","text":"","code":"api_entsoe_dam_prices(   country,   from_data,   to_data,   api_key = Sys.getenv(\"ENTSOE_KEY\") )"},{"path":"https://mbsenergy.github.io/fluxer/reference/api_entsoe_dam_prices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"INTERNAL - API Retrieve Day-Ahead Market Prices for a Specific Country — api_entsoe_dam_prices","text":"country character string specifying country retrieve DAM prices. country match entry entsoe_countries table. from_data Date object specifying start date data range. Default 365 days current date. to_data Date object specifying end date data range. Default current date. api_key character string containing ENTSOE API key. can passed directly retrieved environment variable ENTSOE_KEY.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/api_entsoe_dam_prices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"INTERNAL - API Retrieve Day-Ahead Market Prices for a Specific Country — api_entsoe_dam_prices","text":"data.table containing formatted DAM price data specified country time range. data table includes: DATE: date YYYY-MM-DD format. HOUR: hour day (position data). VALUE: price value EUR. UNIT: unit price (always 'EUR').","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/api_req.html","id":null,"dir":"Reference","previous_headings":"","what":"Make an API Request to ENTSO-E Web API — api_req","title":"Make an API Request to ENTSO-E Web API — api_req","text":"function sends request ENTSO-E (European Network Transmission System Operators Electricity) Web API, retrieves data based given query, processes response. handles XML zip file responses.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/api_req.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make an API Request to ENTSO-E Web API — api_req","text":"","code":"api_req(   api_scheme = \"https://\",   api_domain = \"web-api.tp.entsoe.eu/\",   api_name = \"api?\",   query_string = NULL,   api_key = NULL )"},{"path":"https://mbsenergy.github.io/fluxer/reference/api_req.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make an API Request to ENTSO-E Web API — api_req","text":"api_scheme string representing API scheme, default \"https://\". protocol used API request. api_domain string representing domain name API, default \"web-api.tp.entsoe.eu/\". api_name string representing API name endpoint, default \"api?\". query_string string representing query parameters appended API URL. parameter required. api_key string representing security token used authentication. parameter required.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/api_req.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make an API Request to ENTSO-E Web API — api_req","text":"list containing response data: en_cont_list list XML content response zip file. list contains decompressed XML files. en_cont XML content response XML document.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/api_req.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make an API Request to ENTSO-E Web API — api_req","text":"function first validates presence required arguments: query_string api_key. API request successful, handles XML responses zip file responses: response zip file (application/zip), downloads extracts XML content. response XML (text/xml application/xml), returns XML content directly. request fails 200 OK response contains error message exceeds data limit, function checks need offset query recursively retries new query offset.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/api_req.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make an API Request to ENTSO-E Web API — api_req","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage of the api_req function query_string <- \"documentType=A63&businessType=A85\" api_key <- \"your_api_key\" result <- api_req(query_string = query_string, api_key = api_key) print(result) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/compare_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Column Names Between Two data.tables — compare_colnames","title":"Compare Column Names Between Two data.tables — compare_colnames","text":"function compares column names two data.table objects identifies columns missing .","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/compare_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Column Names Between Two data.tables — compare_colnames","text":"","code":"compare_colnames(dt1, dt2, return_list = FALSE)"},{"path":"https://mbsenergy.github.io/fluxer/reference/compare_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Column Names Between Two data.tables — compare_colnames","text":"dt1 data.table object. dt2 data.table object. return_list Logical. TRUE, function returns list missing columns; FALSE, returns formatted kable table. Default FALSE.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/compare_colnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Column Names Between Two data.tables — compare_colnames","text":"return_list = TRUE, named list : missing_in_dt1 Columns present dt2 missing dt1 missing_in_dt2 Columns present dt1 missing dt2 return_list = FALSE, kable table showing missing columns.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/compare_colnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Column Names Between Two data.tables — compare_colnames","text":"","code":"library(data.table)  dt1 = data.table(a = 1:5, b = 6:10, c = 11:15) dt2 = data.table(b = 1:5, c = 6:10, d = 11:15)  # Return a kable table compare_colnames(dt1, dt2) #>  #>  #> |Column |Missing_In | #> |:------|:----------| #> |d      |dt1        | #> |a      |dt2        |  # Return a list with missing columns compare_colnames(dt1, dt2, return_list = TRUE) #> [[1]] #> [[1]]$missing_in_dt1 #> [1] \"d\" #>  #>  #> [[2]] #> [[2]]$missing_in_dt2 #> [1] \"a\" #>  #>"},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_download_extracted_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Download Extracted File from Refinitiv Datascope — datascope_download_extracted_file","title":"Download Extracted File from Refinitiv Datascope — datascope_download_extracted_file","text":"function downloads extracted file Refinitiv Datascope API using provided extracted_file_id auth_token. file saved specified save_path.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_download_extracted_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download Extracted File from Refinitiv Datascope — datascope_download_extracted_file","text":"","code":"datascope_download_extracted_file(   extracted_file_id,   auth_token,   filename = \"raw.csv\" )"},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_download_extracted_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download Extracted File from Refinitiv Datascope — datascope_download_extracted_file","text":"extracted_file_id Character. unique identifier extracted file. auth_token Character. authentication token accessing API. save_path Character. local file path downloaded file saved.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_download_extracted_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download Extracted File from Refinitiv Datascope — datascope_download_extracted_file","text":"Character. path file saved.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_download_extracted_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download Extracted File from Refinitiv Datascope — datascope_download_extracted_file","text":"","code":"if (FALSE) { # \\dontrun{ download_extracted_file(\"VjF8fDMzNjE5Mjk\", \"<your_auth_token>\", \"CM_STRIKE_PRICE_20250329.csv\") } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_instrument_items.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Items from a Specific Instrument List in Refinitiv DataScope Select API — datascope_instrument_items","title":"Retrieve Items from a Specific Instrument List in Refinitiv DataScope Select API — datascope_instrument_items","text":"function sends GET request Refinitiv DataScope Select API retrieve items specific instrument list based provided instrument list ID authentication token. processes response returns result data table.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_instrument_items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Items from a Specific Instrument List in Refinitiv DataScope Select API — datascope_instrument_items","text":"","code":"datascope_instrument_items(instrument_list_id, auth_token)"},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_instrument_items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Items from a Specific Instrument List in Refinitiv DataScope Select API — datascope_instrument_items","text":"instrument_list_id character string representing ID instrument list retrieve items. auth_token character string representing authentication token obtained Refinitiv DataScope Select API.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_instrument_items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Items from a Specific Instrument List in Refinitiv DataScope Select API — datascope_instrument_items","text":"data table containing items specified instrument list.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_instrument_items.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Items from a Specific Instrument List in Refinitiv DataScope Select API — datascope_instrument_items","text":"","code":"if (FALSE) { # \\dontrun{   instrument_list_id <- \"'0x08532ebecc787a72'\"   auth_token <- \"<your_auth_token>\"   instrument_items <- get_instrument_items(instrument_list_id, auth_token)   print(instrument_items) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_instrument_lists.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Instrument Lists from Refinitiv DataScope Select API — datascope_instrument_lists","title":"Retrieve Instrument Lists from Refinitiv DataScope Select API — datascope_instrument_lists","text":"function sends POST request Refinitiv DataScope Select API retrieve instrument lists based provided authentication token. processes response returns result data table.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_instrument_lists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Instrument Lists from Refinitiv DataScope Select API — datascope_instrument_lists","text":"","code":"datascope_instrument_lists(auth_token)"},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_instrument_lists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Instrument Lists from Refinitiv DataScope Select API — datascope_instrument_lists","text":"auth_token character string representing authentication token obtained Refinitiv DataScope Select API.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_instrument_lists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Instrument Lists from Refinitiv DataScope Select API — datascope_instrument_lists","text":"data table containing instrument lists retrieved API.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_instrument_lists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Instrument Lists from Refinitiv DataScope Select API — datascope_instrument_lists","text":"","code":"if (FALSE) { # \\dontrun{   auth_token <- \"<your_auth_token>\"   instrument_lists <- get_instrument_lists(auth_token)   print(instrument_lists) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_extraction_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Files for a Specific Report Extraction from Refinitiv DataScope Select API — datascope_report_extraction_files","title":"Retrieve Files for a Specific Report Extraction from Refinitiv DataScope Select API — datascope_report_extraction_files","text":"function sends GET request Refinitiv DataScope Select API retrieve files associated specific report extraction, based provided report extraction ID authentication token. processes response returns result data table.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_extraction_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Files for a Specific Report Extraction from Refinitiv DataScope Select API — datascope_report_extraction_files","text":"","code":"datascope_report_extraction_files(   report_extraction_id,   auth_token,   file_type = \".csv\" )"},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_extraction_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Files for a Specific Report Extraction from Refinitiv DataScope Select API — datascope_report_extraction_files","text":"report_extraction_id character string representing ID report extraction retrieve files. auth_token character string representing authentication token obtained Refinitiv DataScope Select API.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_extraction_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Files for a Specific Report Extraction from Refinitiv DataScope Select API — datascope_report_extraction_files","text":"data table containing files specified report extraction.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_extraction_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Files for a Specific Report Extraction from Refinitiv DataScope Select API — datascope_report_extraction_files","text":"","code":"if (FALSE) { # \\dontrun{   report_extraction_id <- \"'6651000'\"   auth_token <- \"<your_auth_token>\"   report_files <- get_report_extraction_files(report_extraction_id, auth_token)   print(report_files) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_lastextraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Last Extraction for a Specific Schedule from Refinitiv DataScope Select API — datascope_report_lastextraction","title":"Retrieve Last Extraction for a Specific Schedule from Refinitiv DataScope Select API — datascope_report_lastextraction","text":"function sends GET request Refinitiv DataScope Select API retrieve last extraction specific schedule, based provided schedule ID authentication token. processes response returns result data table.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_lastextraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Last Extraction for a Specific Schedule from Refinitiv DataScope Select API — datascope_report_lastextraction","text":"","code":"datascope_report_lastextraction(schedule_id, auth_token)"},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_lastextraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Last Extraction for a Specific Schedule from Refinitiv DataScope Select API — datascope_report_lastextraction","text":"schedule_id character string representing ID schedule. auth_token character string representing authentication token obtained Refinitiv DataScope Select API.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_lastextraction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Last Extraction for a Specific Schedule from Refinitiv DataScope Select API — datascope_report_lastextraction","text":"data table containing last extraction details specified schedule.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_lastextraction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Last Extraction for a Specific Schedule from Refinitiv DataScope Select API — datascope_report_lastextraction","text":"","code":"if (FALSE) { # \\dontrun{   schedule_id <- \"'0x05807049631b1f86'\"   auth_token <- \"<your_auth_token>\"   last_extraction <- get_last_extraction(schedule_id, auth_token)   print(last_extraction) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_templates.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve All Report Templates from Refinitiv DataScope Select API — datascope_report_templates","title":"Retrieve All Report Templates from Refinitiv DataScope Select API — datascope_report_templates","text":"function sends GET request Refinitiv DataScope Select API retrieve available report templates. processes response returns result data table.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_templates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve All Report Templates from Refinitiv DataScope Select API — datascope_report_templates","text":"","code":"datascope_report_templates(auth_token)"},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_templates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve All Report Templates from Refinitiv DataScope Select API — datascope_report_templates","text":"auth_token character string representing authentication token obtained Refinitiv DataScope Select API.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_templates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve All Report Templates from Refinitiv DataScope Select API — datascope_report_templates","text":"data table containing available report templates.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_templates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve All Report Templates from Refinitiv DataScope Select API — datascope_report_templates","text":"","code":"if (FALSE) { # \\dontrun{   auth_token <- \"<your_auth_token>\"   report_templates <- get_report_templates(auth_token)   print(report_templates) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_template_schedules.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Schedules for a Specific Report Template from Refinitiv DataScope Select API — datascope_report_template_schedules","title":"Retrieve Schedules for a Specific Report Template from Refinitiv DataScope Select API — datascope_report_template_schedules","text":"function sends GET request Refinitiv DataScope Select API retrieve schedules associated specific report template, based provided report template ID authentication token. processes response returns result data table.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_template_schedules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Schedules for a Specific Report Template from Refinitiv DataScope Select API — datascope_report_template_schedules","text":"","code":"datascope_report_template_schedules(report_template_id, auth_token)"},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_template_schedules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Schedules for a Specific Report Template from Refinitiv DataScope Select API — datascope_report_template_schedules","text":"report_template_id character string representing ID report template retrieve schedules. auth_token character string representing authentication token obtained Refinitiv DataScope Select API.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_template_schedules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Schedules for a Specific Report Template from Refinitiv DataScope Select API — datascope_report_template_schedules","text":"data table containing schedules specified report template.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_report_template_schedules.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Schedules for a Specific Report Template from Refinitiv DataScope Select API — datascope_report_template_schedules","text":"","code":"if (FALSE) { # \\dontrun{   report_template_id <- \"'0x12345abcde'\"   auth_token <- \"<your_auth_token>\"   report_schedules <- get_report_template_schedules(report_template_id, auth_token)   print(report_schedules) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Authenticate with Refinitiv DataScope Select API — datascope_token","title":"Authenticate with Refinitiv DataScope Select API — datascope_token","text":"function sends POST request Refinitiv DataScope Select API obtain authentication token using provided username password.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Authenticate with Refinitiv DataScope Select API — datascope_token","text":"","code":"datascope_token(username, password)"},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Authenticate with Refinitiv DataScope Select API — datascope_token","text":"username character string representing Refinitiv username. password character string representing Refinitiv password.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Authenticate with Refinitiv DataScope Select API — datascope_token","text":"character string representing authentication token.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/datascope_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Authenticate with Refinitiv DataScope Select API — datascope_token","text":"","code":"if (FALSE) { # \\dontrun{   token <- authenticate_refinitiv(\"9028810\", \"Ref-e2021\")   print(token) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/db_get_minmax_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Minimum and Maximum Dates from a Table — db_get_minmax_dates","title":"Get Minimum and Maximum Dates from a Table — db_get_minmax_dates","text":"function queries PostgreSQL database table retrieve minimum maximum dates specified date column.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/db_get_minmax_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Minimum and Maximum Dates from a Table — db_get_minmax_dates","text":"","code":"db_get_minmax_dates(con, table_name, date_column = \"DATE\")"},{"path":"https://mbsenergy.github.io/fluxer/reference/db_get_minmax_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Minimum and Maximum Dates from a Table — db_get_minmax_dates","text":"con database connection object created using DBI::dbConnect(). table_name character string specifying name table query. date_column character string specifying name date column. Defaults \"DATE\".","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/db_get_minmax_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Minimum and Maximum Dates from a Table — db_get_minmax_dates","text":"data.table two columns: min_date earliest date specified column. max_date latest date specified column.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/db_get_minmax_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Minimum and Maximum Dates from a Table — db_get_minmax_dates","text":"","code":"if (FALSE) { # \\dontrun{ # Establish a connection to PostgreSQL con <- DBI::dbConnect(   RPostgres::Postgres(),   dbname = \"your_database\",   host = \"your_host\",   port = 5432,   user = \"your_user\",   password = \"your_password\" )  # Get the minimum and maximum dates from the table result_dt <- db_get_minmax_dates(con, table_name = \"TS01_entsoe_dam_prices\", date_column = \"DATE\") print(result_dt)  # Disconnect from the database DBI::dbDisconnect(con) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/dt_obs_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Count unique values in a column of a data.table — dt_obs_dist","title":"Count unique values in a column of a data.table — dt_obs_dist","text":"function takes data.table, groups specified column, counts occurrences unique value.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/dt_obs_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count unique values in a column of a data.table — dt_obs_dist","text":"","code":"dt_obs_dist(dt, column_name)"},{"path":"https://mbsenergy.github.io/fluxer/reference/dt_obs_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count unique values in a column of a data.table — dt_obs_dist","text":"dt data.table object. column_name character string specifying column analyze.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/dt_obs_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count unique values in a column of a data.table — dt_obs_dist","text":"data.table unique values column counts.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/dt_obs_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count unique values in a column of a data.table — dt_obs_dist","text":"","code":"dt <- data.table(DATE = c(\"2024-01-01\", \"2024-01-02\", \"2024-01-01\", \"2024-01-03\")) count_column_values(dt, \"DATE\") #> Error in count_column_values(dt, \"DATE\"): could not find function \"count_column_values\""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_actual_generation.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve and Process ENTSO-E Actual Generation Data — entsoe_actual_generation","title":"Retrieve and Process ENTSO-E Actual Generation Data — entsoe_actual_generation","text":"function retrieves processes ENTSO-E actual generation data specified year month. supports option either retain delete raw CSV file processing based raw argument. also allows specifying output folder downloaded CSV file.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_actual_generation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve and Process ENTSO-E Actual Generation Data — entsoe_actual_generation","text":"","code":"entsoe_actual_generation(   year_data,   month_data,   raw = FALSE,   user = Sys.getenv(\"ENTSOE_USER\"),   password = Sys.getenv(\"ENTSOE_PASSWORD\"),   output_folder = tempdir() )"},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_actual_generation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve and Process ENTSO-E Actual Generation Data — entsoe_actual_generation","text":"year_data Numeric. year download ENTSO-E data (e.g., 2024). month_data Numeric. month download ENTSO-E data (e.g., 10 October). raw Logical. TRUE, keeps downloaded CSV file processing. FALSE, CSV file deleted read. Default FALSE. user Character. ENTSO-E API key. Passed entsoe_download_file authenticating download request. Default Sys.getenv('ENTSOE_USER'). password Character. ENTSO-E API key. Passed entsoe_download_file authenticating download request. Default Sys.getenv('ENTSOE_PASSWORD'). output_folder Character. folder raw CSV file saved. Default tempdir().","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_actual_generation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve and Process ENTSO-E Actual Generation Data — entsoe_actual_generation","text":"data.table long format following columns: DATE date data point. TIME time data point HH:MM format. HOUR hour extracted DATETIME column integer. RESOLUTION resolution code (e.g., quarter-hour, hourly). CODE_MAP map code (e.g., country, bidding zone). CODE_EIC EIC code area (e.g., grid market region). PRODUCTION_TYPE type power generation (e.g., \"Fossil Oil\", \"Wind Onshore\"). ASSET_CATEGORY category asset (e.g., \"Thermal\", \"Wind\", etc.). ACTUAL_GENERATION actual generation output given time period. ACTUAL_CONSUMPTION actual consumption given time period. UPDATETIME last update time data entry. VARIABLE variable measured, either \"ACTUAL_GENERATION\" \"ACTUAL_CONSUMPTION\". VALUE value corresponding variable.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_actual_generation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve and Process ENTSO-E Actual Generation Data — entsoe_actual_generation","text":"","code":"if (FALSE) { # \\dontrun{ # Download and process the data for October 2024, keeping the CSV file result_raw <- entsoe_actual_generation(2024, 10, raw = TRUE)  # Download and process the data for October 2024, deleting the CSV file after processing result <- entsoe_actual_generation(2024, 10) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"List of Mapped Countries for DAM Prices — entsoe_countries","title":"List of Mapped Countries for DAM Prices — entsoe_countries","text":"data table contains mapping countries respective EIC codes retrieving DAM prices ENTSOE Transparency Platform API.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of Mapped Countries for DAM Prices — entsoe_countries","text":"","code":"entsoe_countries"},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_countries.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of Mapped Countries for DAM Prices — entsoe_countries","text":"object class data.table (inherits data.frame) 43 rows 5 columns.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_countries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of Mapped Countries for DAM Prices — entsoe_countries","text":"","code":"library(entsoeapi) #> Error in library(entsoeapi): there is no package called 'entsoeapi' entsoe_countries #> Key: <CODE_2> #>               COUNTRY CODE_2_AREA CODE_2          CODE_ENTSOE         CODE_EIC #>                <char>      <char> <char>               <char>           <char> #>  1:           Austria          AT     AT              Austria 10YAT-APG------L #>  2:          Bulgaria          BG     BG             Bulgaria 10YCA-BULGARIA-R #>  3:            Brazil          BE     BR              Belgium 10YBE----------2 #>  4:       Switzerland          CH     CH          Switzerland 10YCH-SWISSGRIDZ #>  5:            Cyprus          CY     CY               Cyprus  10YCY-TSO-----L #>  6:           Czechia          CZ     CZ       Czech Republic 10YCZ-CEPS-----N #>  7:           Germany          DE     DE      Germany (DE-LU) 10Y1001A1001A82H #>  8:           Denmark         DK1     DK        Denmark (DK1) 10YDK-1--------W #>  9:           Denmark         DK2     DK        Denmark (DK2) 10YDK-2--------M #> 10:           Estonia          EE     EE              Estonia 10Y1001A1001A39I #> 11:             Spain          ES     ES                Spain 10YES-REE------0 #> 12:           Finland          FI     FI              Finland 10YFI-1--------U #> 13:            France          FR     FR               France 10YFR-RTE------C #> 14:            Greece          GR     GR               Greece 10YGR-HTSO-----Y #> 15:           Croatia          HR     HR              Croatia 10YHR-HEP------M #> 16:           Hungary          HU     HU              Hungary 10YHU-MAVIR----U #> 17:           Ireland          IE     IE              Ireland 10YIE-1001A00010 #> 18:             Italy        NORD     IT        Italy (North) 10Y1001A1001A73I #> 19:             Italy        CNOR     IT Italy (Center-North) 10Y1001A1001A70O #> 20:             Italy        CSUD     IT Italy (Center-South) 10Y1001A1001A71M #> 21:             Italy         SUD     IT        Italy (South) 10Y1001A1001A788 #> 22:             Italy        SICI     IT       Italy (Sicily) 10Y1001A1001A74G #> 23:             Italy        SARD     IT     Italy (Sardinia) 10Y1001A1001A75E #> 24:         Lithuania          LT     LT            Lithuania 10YLT-1001A0008Q #> 25:        Luxembourg          LU     LU           Luxembourg 10Y1001A1001A82H #> 26:            Latvia          LV     LV               Latvia 10YLV-1001A00074 #> 27:             Malta          MT     MT                Malta 10Y1001A1001A93C #> 28: Netherlands (the)          NL     NL          Netherlands 10YNL----------L #> 29:            Norway         NO1     NO         Norway (NO1) 10YNO-1--------2 #> 30:            Norway         NO2     NO         Norway (NO2) 10YNO-2--------T #> 31:            Norway         NO3     NO         Norway (NO3) 10YNO-3--------J #> 32:            Norway         NO4     NO         Norway (NO4) 10YNO-4--------9 #> 33:            Norway         NO5     NO         Norway (NO5) 10YNO-5--------C #> 34:            Poland          PL     PL               Poland 10YPL-AREA-----S #> 35:          Portugal          PT     PT             Portugal 10YPT-REN------W #> 36:           Romania          RO     RO              Romania 10YRO-TEL------P #> 37:            Sweden         SE1     SE         Sweden (SE1) 10YSE-1--------K #> 38:            Sweden         SE2     SE         Sweden (SE2) 10YSE-2--------M #> 39:            Sweden         SE3     SE         Sweden (SE3) 10YSE-3--------J #> 40:            Sweden         SE4     SE         Sweden (SE4) 10YSE-4--------9 #> 41:          Slovenia          SI     SI             Slovenia 10YSI-ELES-----O #> 42:          Slovakia          SK     SK             Slovakia 10YSK-SEPS-----K #> 43:              <NA>          UK     UK       United Kingdom 10YGB----------A #>               COUNTRY CODE_2_AREA CODE_2          CODE_ENTSOE         CODE_EIC"},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_create_url_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a Specific File from ENTSO-E SFTP Server — entsoe_create_url_file","title":"Retrieve a Specific File from ENTSO-E SFTP Server — entsoe_create_url_file","text":"function requests retrieves specific CSV file ENTSO-E SFTP server based folder (basis_name), year, month. authenticates using credentials stored environment variables (ENTSOE_USER ENTSOE_PASSWORD).","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_create_url_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a Specific File from ENTSO-E SFTP Server — entsoe_create_url_file","text":"","code":"entsoe_create_url_file(basis_name, year, month)"},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_create_url_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a Specific File from ENTSO-E SFTP Server — entsoe_create_url_file","text":"basis_name character string specifying folder name within ENTSO-E SFTP server's transparency platform. year numeric character string specifying year file retrieved. month numeric character string specifying month file retrieved.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_create_url_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a Specific File from ENTSO-E SFTP Server — entsoe_create_url_file","text":"response object containing contents specified file.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_create_url_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve a Specific File from ENTSO-E SFTP Server — entsoe_create_url_file","text":"function constructs file path basis_name, year, month uses curl retrieve specified CSV file server.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_create_url_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Folder Contents from ENTSO-E SFTP Server — entsoe_create_url_files","title":"Retrieve Folder Contents from ENTSO-E SFTP Server — entsoe_create_url_files","text":"function requests retrieves contents specified folder ENTSO-E SFTP server, given folder name (basis_name). authenticates using credentials stored environment variables (ENTSOE_USER ENTSOE_PASSWORD).","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_create_url_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Folder Contents from ENTSO-E SFTP Server — entsoe_create_url_files","text":"","code":"entsoe_create_url_files(basis_name)"},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_create_url_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Folder Contents from ENTSO-E SFTP Server — entsoe_create_url_files","text":"basis_name character string specifying name folder within ENTSO-E SFTP server's transparency platform.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_create_url_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Folder Contents from ENTSO-E SFTP Server — entsoe_create_url_files","text":"response object containing contents specified folder SFTP server.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_create_url_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Folder Contents from ENTSO-E SFTP Server — entsoe_create_url_files","text":"function utilizes curl securely access specified folder via SFTP. Ensure environment variables ENTSOE_USER ENTSOE_PASSWORD contain valid credentials.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_create_url_folders.html","id":null,"dir":"Reference","previous_headings":"","what":"Create URL Folder Request to ENTSO-E SFTP Server — entsoe_create_url_folders","title":"Create URL Folder Request to ENTSO-E SFTP Server — entsoe_create_url_folders","text":"function creates sends request ENTSO-E SFTP server's transparency platform, retrieving list available folders files. authenticates using provided credentials (user psw) secure FTP access.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_create_url_folders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create URL Folder Request to ENTSO-E SFTP Server — entsoe_create_url_folders","text":"","code":"entsoe_create_url_folders(   user = Sys.getenv(\"ENTSOE_USER\"),   psw = Sys.getenv(\"ENTSOE_PASSWORD\") )"},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_create_url_folders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create URL Folder Request to ENTSO-E SFTP Server — entsoe_create_url_folders","text":"user character string username ENTSO-E SFTP server authentication. psw character string password ENTSO-E SFTP server authentication.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_create_url_folders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create URL Folder Request to ENTSO-E SFTP Server — entsoe_create_url_folders","text":"response object containing contents specified SFTP directory, retrieved ENTSO-E transparency platform.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_create_url_folders.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create URL Folder Request to ENTSO-E SFTP Server — entsoe_create_url_folders","text":"function uses curl handle HTTP request secure FTP access. Ensure user psw parameters provided valid ENTSO-E credentials.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_create_url_folders.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create URL Folder Request to ENTSO-E SFTP Server — entsoe_create_url_folders","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage: entsoe_create_url_folders(user = \"your_username\", psw = \"your_password\") } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_dam_prices.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Day-Ahead Market Prices for a Specific Country — entsoe_dam_prices","title":"Retrieve Day-Ahead Market Prices for a Specific Country — entsoe_dam_prices","text":"function retrieves Day-Ahead Market (DAM) prices specific country ENTSOE Transparency Platform API. function fetches market price data given time range country, processes data, formats data.table. function retrieves Day-Ahead Market (DAM) prices specific country ENTSOE Transparency Platform API. function fetches market price data given time range country, processes data, formats data.table.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_dam_prices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Day-Ahead Market Prices for a Specific Country — entsoe_dam_prices","text":"","code":"entsoe_dam_prices(   country,   from_data,   to_data,   api_key = Sys.getenv(\"ENTSOE_KEY\"),   verbose = FALSE,   plot = FALSE )"},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_dam_prices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Day-Ahead Market Prices for a Specific Country — entsoe_dam_prices","text":"country character string specifying country retrieve DAM prices. country match entry entsoe_countries table. from_data Date object specifying start date data range. Default 365 days current date. to_data Date object specifying end date data range. Default current date. api_key character string containing ENTSOE API key. can passed directly retrieved environment variable ENTSOE_KEY.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_dam_prices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Day-Ahead Market Prices for a Specific Country — entsoe_dam_prices","text":"data.table containing formatted DAM price data specified country time range. data table includes: DATE: date YYYY-MM-DD format. HOUR: hour day (position data). VALUE: price value EUR. UNIT: unit price (always 'EUR'). data.table containing formatted DAM price data specified country time range. data table includes: DATE: date YYYY-MM-DD format. HOUR: hour day (position data). VALUE: price value EUR. UNIT: unit price (always 'EUR').","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_dam_prices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Day-Ahead Market Prices for a Specific Country — entsoe_dam_prices","text":"","code":"# Example usage to retrieve DAM prices for Italy (North) country <- \"Italy (North)\" from_data <- Sys.Date() - 365 to_data <- Sys.Date() dam_prices <- entsoe_dam_prices(country, from_data, to_data, api_key = Sys.getenv('ENTSOE_KEY')) #> [OK] DATA for Italy (North) from 2024-04-01 to 2024-04-30 retrieved correctly  #> [OK] DATA for Italy (North) from 2024-05-01 to 2024-05-31 retrieved correctly  #> [OK] DATA for Italy (North) from 2024-06-01 to 2024-06-30 retrieved correctly  #> [OK] DATA for Italy (North) from 2024-07-01 to 2024-07-31 retrieved correctly  #> [OK] DATA for Italy (North) from 2024-08-01 to 2024-08-31 retrieved correctly  #> [OK] DATA for Italy (North) from 2024-09-01 to 2024-09-30 retrieved correctly  #> [OK] DATA for Italy (North) from 2024-10-01 to 2024-10-31 retrieved correctly  #> [OK] DATA for Italy (North) from 2024-11-01 to 2024-11-30 retrieved correctly  #> [OK] DATA for Italy (North) from 2024-12-01 to 2024-12-31 retrieved correctly  #> [OK] DATA for Italy (North) from 2025-01-01 to 2025-01-31 retrieved correctly  #> [OK] DATA for Italy (North) from 2025-02-01 to 2025-02-28 retrieved correctly  #> [OK] DATA for Italy (North) from 2025-03-01 to 2025-03-31 retrieved correctly  #> [OK] DATA for Italy (North) from 2025-04-01 to 2025-04-28 retrieved correctly  print(dam_prices) #>       COUNTRY   CODE_ENTSOE       DATE  HOUR RESOLUTION  VALUE   UNIT #>        <char>        <char>     <char> <int>     <char>  <num> <char> #>    1:   Italy Italy (North) 2025-03-30     2      PT15M 126.00    EUR #>    2:   Italy Italy (North) 2024-04-01     1      PT60M  90.84    EUR #>    3:   Italy Italy (North) 2024-04-01     2      PT60M  90.00    EUR #>    4:   Italy Italy (North) 2024-04-01     3      PT60M  87.67    EUR #>    5:   Italy Italy (North) 2024-04-01     4      PT60M  85.67    EUR #>   ---                                                                 #> 9596:   Italy Italy (North) 2025-04-28    20      PT15M  91.95    EUR #> 9597:   Italy Italy (North) 2025-04-28    21      PT15M  97.10    EUR #> 9598:   Italy Italy (North) 2025-04-28    22      PT15M  97.10    EUR #> 9599:   Italy Italy (North) 2025-04-28    23      PT15M  97.10    EUR #> 9600:   Italy Italy (North) 2025-04-28    24      PT15M  97.10    EUR #>                  DATETIME #>                    <POSc> #>    1:                <NA> #>    2: 2024-04-01 01:00:00 #>    3: 2024-04-01 02:00:00 #>    4: 2024-04-01 03:00:00 #>    5: 2024-04-01 04:00:00 #>   ---                     #> 9596: 2025-04-28 20:00:00 #> 9597: 2025-04-28 21:00:00 #> 9598: 2025-04-28 22:00:00 #> 9599: 2025-04-28 23:00:00 #> 9600: 2025-04-29 00:00:00  # Example usage to retrieve DAM prices for Italy (North) country <- \"Italy (North)\" from_data <- Sys.Date() - 365 to_data <- Sys.Date() dam_prices <- entsoe_dam_prices(country, from_data, to_data, api_key = Sys.getenv('ENTSOE_KEY')) #> [OK] DATA for Italy (North) from 2024-04-01 to 2024-04-30 retrieved correctly  #> [OK] DATA for Italy (North) from 2024-05-01 to 2024-05-31 retrieved correctly  #> [OK] DATA for Italy (North) from 2024-06-01 to 2024-06-30 retrieved correctly  #> [OK] DATA for Italy (North) from 2024-07-01 to 2024-07-31 retrieved correctly  #> [OK] DATA for Italy (North) from 2024-08-01 to 2024-08-31 retrieved correctly  #> [OK] DATA for Italy (North) from 2024-09-01 to 2024-09-30 retrieved correctly  #> [OK] DATA for Italy (North) from 2024-10-01 to 2024-10-31 retrieved correctly  #> [OK] DATA for Italy (North) from 2024-11-01 to 2024-11-30 retrieved correctly  #> [OK] DATA for Italy (North) from 2024-12-01 to 2024-12-31 retrieved correctly  #> [OK] DATA for Italy (North) from 2025-01-01 to 2025-01-31 retrieved correctly  #> [OK] DATA for Italy (North) from 2025-02-01 to 2025-02-28 retrieved correctly  #> [OK] DATA for Italy (North) from 2025-03-01 to 2025-03-31 retrieved correctly  #> [OK] DATA for Italy (North) from 2025-04-01 to 2025-04-28 retrieved correctly  print(dam_prices) #>       COUNTRY   CODE_ENTSOE       DATE  HOUR RESOLUTION  VALUE   UNIT #>        <char>        <char>     <char> <int>     <char>  <num> <char> #>    1:   Italy Italy (North) 2025-03-30     2      PT15M 126.00    EUR #>    2:   Italy Italy (North) 2024-04-01     1      PT60M  90.84    EUR #>    3:   Italy Italy (North) 2024-04-01     2      PT60M  90.00    EUR #>    4:   Italy Italy (North) 2024-04-01     3      PT60M  87.67    EUR #>    5:   Italy Italy (North) 2024-04-01     4      PT60M  85.67    EUR #>   ---                                                                 #> 9596:   Italy Italy (North) 2025-04-28    20      PT15M  91.95    EUR #> 9597:   Italy Italy (North) 2025-04-28    21      PT15M  97.10    EUR #> 9598:   Italy Italy (North) 2025-04-28    22      PT15M  97.10    EUR #> 9599:   Italy Italy (North) 2025-04-28    23      PT15M  97.10    EUR #> 9600:   Italy Italy (North) 2025-04-28    24      PT15M  97.10    EUR #>                  DATETIME #>                    <POSc> #>    1:                <NA> #>    2: 2024-04-01 01:00:00 #>    3: 2024-04-01 02:00:00 #>    4: 2024-04-01 03:00:00 #>    5: 2024-04-01 04:00:00 #>   ---                     #> 9596: 2025-04-28 20:00:00 #> 9597: 2025-04-28 21:00:00 #> 9598: 2025-04-28 22:00:00 #> 9599: 2025-04-28 23:00:00 #> 9600: 2025-04-29 00:00:00"},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_download_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Download a File from ENTSO-E SFTP Server — entsoe_download_file","title":"Download a File from ENTSO-E SFTP Server — entsoe_download_file","text":"function downloads specified file ENTSO-E SFTP server using provided credentials.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_download_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download a File from ENTSO-E SFTP Server — entsoe_download_file","text":"","code":"entsoe_download_file(   basis_name,   year,   month,   user = Sys.getenv(\"ENTSOE_USER\"),   password = Sys.getenv(\"ENTSOE_PASSWORD\"),   output_file )"},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_download_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download a File from ENTSO-E SFTP Server — entsoe_download_file","text":"basis_name character string specifying high-level folder name file. year integer specifying year file retrieve. month integer specifying month file retrieve (e.g., 1 January). user character string username SFTP authentication. password character string password SFTP authentication. output_file character string specifying local file path downloaded file saved.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_download_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download a File from ENTSO-E SFTP Server — entsoe_download_file","text":"Logical value indicating whether file downloaded successfully.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_download_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download a File from ENTSO-E SFTP Server — entsoe_download_file","text":"","code":"if (FALSE) { # \\dontrun{ # Download a file for specified parameters download_successful <- download_entsoe_file(basis_name = \"example_folder\", year = 2023, month = 1,                                               user = Sys.getenv(\"ENTSOE_USER\"),                                               password = Sys.getenv(\"ENTSOE_PASSWORD\"),                                               output_file = \"local_file_path.csv\") } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_generation_by_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Actual Generation by Production Type for a Specific Country — entsoe_generation_by_type","title":"Retrieve Actual Generation by Production Type for a Specific Country — entsoe_generation_by_type","text":"function retrieves actual generation production type data specific country ENTSOE Transparency Platform API. function fetches generation data given time range country, processes data, formats data.table.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_generation_by_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Actual Generation by Production Type for a Specific Country — entsoe_generation_by_type","text":"","code":"entsoe_generation_by_type(   country,   from_data,   to_data,   api_key = Sys.getenv(\"ENTSOE_KEY\") )"},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_generation_by_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Actual Generation by Production Type for a Specific Country — entsoe_generation_by_type","text":"country character string specifying country retrieve generation data. country match entry entsoe_countries table. from_data Date object specifying start date data range. Default 365 days current date. to_data Date object specifying end date data range. Default current date. api_key character string containing ENTSOE API key. can passed directly retrieved environment variable ENTSOE_KEY.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_generation_by_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Actual Generation by Production Type for a Specific Country — entsoe_generation_by_type","text":"data.table containing formatted generation data specified country time range. data table includes: DATE: date YYYY-MM-DD format. HOUR: hour day (position data). PRODUCTION_TYPE: type production (e.g., solar, wind, nuclear). VALUE: generation value MW. UNIT: unit generation value (always 'MW').","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_generation_by_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Actual Generation by Production Type for a Specific Country — entsoe_generation_by_type","text":"","code":"# Example usage to retrieve generation data for Italy (North) country <- \"Italy (North)\" from_data <- Sys.Date() - 365 to_data <- Sys.Date() generation_data <- entsoe_generation_by_type(country, from_data, to_data, api_key = Sys.getenv('ENTSOE_KEY')) #> https://web-api.tp.entsoe.eu/api?documentType=A75&processType=A16&in_Domain=10Y1001A1001A73I&periodStart=202404280000&periodEnd=202504290000&securityToken=<...> #> response has arrived #> [OK] DATA for Italy (North) from 2024-04-28 to 2025-04-29 retrieved correctly  print(generation_data) #>                        date position value    uom             zone #>                      <POSc>    <num> <num> <char>           <char> #>      1: 2024-04-28 00:00:00        1   153    MAW 10Y1001A1001A73I #>      2: 2024-04-28 01:00:00        2   153    MAW 10Y1001A1001A73I #>      3: 2024-04-28 02:00:00        3   153    MAW 10Y1001A1001A73I #>      4: 2024-04-28 03:00:00        4   151    MAW 10Y1001A1001A73I #>      5: 2024-04-28 04:00:00        5   152    MAW 10Y1001A1001A73I #>     ---                                                            #> 210036: 2025-04-28 05:45:00       32    17    MAW 10Y1001A1001A73I #> 210037: 2025-04-28 06:00:00       33    19    MAW 10Y1001A1001A73I #> 210038: 2025-04-28 06:15:00       34    16    MAW 10Y1001A1001A73I #> 210039: 2025-04-28 06:30:00       35    15    MAW 10Y1001A1001A73I #> 210040: 2025-04-28 06:45:00       36    10    MAW 10Y1001A1001A73I #>                           data COUNTRY   CODE_ENTSOE #>                         <char>  <char>        <char> #>      1: actual_generation_type   Italy Italy (North) #>      2: actual_generation_type   Italy Italy (North) #>      3: actual_generation_type   Italy Italy (North) #>      4: actual_generation_type   Italy Italy (North) #>      5: actual_generation_type   Italy Italy (North) #>     ---                                              #> 210036: actual_generation_type   Italy Italy (North) #> 210037: actual_generation_type   Italy Italy (North) #> 210038: actual_generation_type   Italy Italy (North) #> 210039: actual_generation_type   Italy Italy (North) #> 210040: actual_generation_type   Italy Italy (North)"},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_list_files.html","id":null,"dir":"Reference","previous_headings":"","what":"List Files within a Specified Folder on ENTSO-E SFTP Server — entsoe_list_files","title":"List Files within a Specified Folder on ENTSO-E SFTP Server — entsoe_list_files","text":"function retrieves lists files specified folder (basis_name) ENTSO-E SFTP server's transparency platform. uses entsoe_create_url_files function fetch file listing processes raw content parse_ftp_files.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_list_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Files within a Specified Folder on ENTSO-E SFTP Server — entsoe_list_files","text":"","code":"entsoe_list_files(basis_name)"},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_list_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Files within a Specified Folder on ENTSO-E SFTP Server — entsoe_list_files","text":"basis_name character string specifying name folder retrieve file listing.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_list_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Files within a Specified Folder on ENTSO-E SFTP Server — entsoe_list_files","text":"data frame containing information files within specified folder ENTSO-E SFTP server. data frame includes file names available metadata.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_list_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List Files within a Specified Folder on ENTSO-E SFTP Server — entsoe_list_files","text":"function sends request ENTSO-E SFTP server, retrieves list files raw text, converts structured format using parse_ftp_files. Ensure basis_name corresponds existing folder server.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_list_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Files within a Specified Folder on ENTSO-E SFTP Server — entsoe_list_files","text":"","code":"if (FALSE) { # \\dontrun{ # List files in a folder named \"example_folder\": head(entsoe_list_files(basis_name = \"OutagesPU\")) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_list_folders.html","id":null,"dir":"Reference","previous_headings":"","what":"List Top-Level Folder Links from ENTSO-E SFTP Server — entsoe_list_folders","title":"List Top-Level Folder Links from ENTSO-E SFTP Server — entsoe_list_folders","text":"function retrieves lists top-level folder links ENTSO-E SFTP server's transparency platform. uses entsoe_create_url_folders function fetch raw folder list processes using parse_ftp_links.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_list_folders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Top-Level Folder Links from ENTSO-E SFTP Server — entsoe_list_folders","text":"","code":"entsoe_list_folders()"},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_list_folders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Top-Level Folder Links from ENTSO-E SFTP Server — entsoe_list_folders","text":"data frame containing names metadata top-level folders ENTSO-E SFTP server.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_list_folders.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List Top-Level Folder Links from ENTSO-E SFTP Server — entsoe_list_folders","text":"function makes request ENTSO-E SFTP server, retrieves folder content raw text, converts structured format using parse_ftp_links. resulting data frame lists folder names relevant details.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/entsoe_list_folders.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Top-Level Folder Links from ENTSO-E SFTP Server — entsoe_list_folders","text":"","code":"if (FALSE) { # \\dontrun{ # List the folders: head(entsoe_list_folders()) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/find_missing_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Missing Dates in a Vector — find_missing_dates","title":"Find Missing Dates in a Vector — find_missing_dates","text":"function identifies missing dates sequence dates. can optionally exclude weekends (Saturday Sunday) results.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/find_missing_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Missing Dates in a Vector — find_missing_dates","text":"","code":"find_missing_dates(dates, full_week = TRUE)"},{"path":"https://mbsenergy.github.io/fluxer/reference/find_missing_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Missing Dates in a Vector — find_missing_dates","text":"dates character vector dates \"YYYY-MM-DD\" format. full_week Logical. TRUE, includes missing dates (default). FALSE, includes missing weekdays (Monday Friday).","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/find_missing_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Missing Dates in a Vector — find_missing_dates","text":"character vector missing dates \"YYYY-MM-DD\" format.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/find_missing_dates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Missing Dates in a Vector — find_missing_dates","text":"","code":"# Example input vector ret_files <- c(   \"2023-12-31\", \"2024-12-01\", \"2024-12-02\", \"2024-12-03\", \"2024-12-04\",   \"2024-12-14\", \"2024-12-20\", \"2024-12-21\", \"2024-12-22\", \"2024-12-23\",   \"2024-12-24\", \"2024-12-25\", \"2024-12-26\", \"2024-12-27\", \"2024-12-28\",   \"2024-12-29\" )  # Find all missing dates (full week) find_missing_dates(ret_files, full_week = TRUE) #>   [1] \"2024-01-01\" \"2024-01-02\" \"2024-01-03\" \"2024-01-04\" \"2024-01-05\" #>   [6] \"2024-01-06\" \"2024-01-07\" \"2024-01-08\" \"2024-01-09\" \"2024-01-10\" #>  [11] \"2024-01-11\" \"2024-01-12\" \"2024-01-13\" \"2024-01-14\" \"2024-01-15\" #>  [16] \"2024-01-16\" \"2024-01-17\" \"2024-01-18\" \"2024-01-19\" \"2024-01-20\" #>  [21] \"2024-01-21\" \"2024-01-22\" \"2024-01-23\" \"2024-01-24\" \"2024-01-25\" #>  [26] \"2024-01-26\" \"2024-01-27\" \"2024-01-28\" \"2024-01-29\" \"2024-01-30\" #>  [31] \"2024-01-31\" \"2024-02-01\" \"2024-02-02\" \"2024-02-03\" \"2024-02-04\" #>  [36] \"2024-02-05\" \"2024-02-06\" \"2024-02-07\" \"2024-02-08\" \"2024-02-09\" #>  [41] \"2024-02-10\" \"2024-02-11\" \"2024-02-12\" \"2024-02-13\" \"2024-02-14\" #>  [46] \"2024-02-15\" \"2024-02-16\" \"2024-02-17\" \"2024-02-18\" \"2024-02-19\" #>  [51] \"2024-02-20\" \"2024-02-21\" \"2024-02-22\" \"2024-02-23\" \"2024-02-24\" #>  [56] \"2024-02-25\" \"2024-02-26\" \"2024-02-27\" \"2024-02-28\" \"2024-02-29\" #>  [61] \"2024-03-01\" \"2024-03-02\" \"2024-03-03\" \"2024-03-04\" \"2024-03-05\" #>  [66] \"2024-03-06\" \"2024-03-07\" \"2024-03-08\" \"2024-03-09\" \"2024-03-10\" #>  [71] \"2024-03-11\" \"2024-03-12\" \"2024-03-13\" \"2024-03-14\" \"2024-03-15\" #>  [76] \"2024-03-16\" \"2024-03-17\" \"2024-03-18\" \"2024-03-19\" \"2024-03-20\" #>  [81] \"2024-03-21\" \"2024-03-22\" \"2024-03-23\" \"2024-03-24\" \"2024-03-25\" #>  [86] \"2024-03-26\" \"2024-03-27\" \"2024-03-28\" \"2024-03-29\" \"2024-03-30\" #>  [91] \"2024-03-31\" \"2024-04-01\" \"2024-04-02\" \"2024-04-03\" \"2024-04-04\" #>  [96] \"2024-04-05\" \"2024-04-06\" \"2024-04-07\" \"2024-04-08\" \"2024-04-09\" #> [101] \"2024-04-10\" \"2024-04-11\" \"2024-04-12\" \"2024-04-13\" \"2024-04-14\" #> [106] \"2024-04-15\" \"2024-04-16\" \"2024-04-17\" \"2024-04-18\" \"2024-04-19\" #> [111] \"2024-04-20\" \"2024-04-21\" \"2024-04-22\" \"2024-04-23\" \"2024-04-24\" #> [116] \"2024-04-25\" \"2024-04-26\" \"2024-04-27\" \"2024-04-28\" \"2024-04-29\" #> [121] \"2024-04-30\" \"2024-05-01\" \"2024-05-02\" \"2024-05-03\" \"2024-05-04\" #> [126] \"2024-05-05\" \"2024-05-06\" \"2024-05-07\" \"2024-05-08\" \"2024-05-09\" #> [131] \"2024-05-10\" \"2024-05-11\" \"2024-05-12\" \"2024-05-13\" \"2024-05-14\" #> [136] \"2024-05-15\" \"2024-05-16\" \"2024-05-17\" \"2024-05-18\" \"2024-05-19\" #> [141] \"2024-05-20\" \"2024-05-21\" \"2024-05-22\" \"2024-05-23\" \"2024-05-24\" #> [146] \"2024-05-25\" \"2024-05-26\" \"2024-05-27\" \"2024-05-28\" \"2024-05-29\" #> [151] \"2024-05-30\" \"2024-05-31\" \"2024-06-01\" \"2024-06-02\" \"2024-06-03\" #> [156] \"2024-06-04\" \"2024-06-05\" \"2024-06-06\" \"2024-06-07\" \"2024-06-08\" #> [161] \"2024-06-09\" \"2024-06-10\" \"2024-06-11\" \"2024-06-12\" \"2024-06-13\" #> [166] \"2024-06-14\" \"2024-06-15\" \"2024-06-16\" \"2024-06-17\" \"2024-06-18\" #> [171] \"2024-06-19\" \"2024-06-20\" \"2024-06-21\" \"2024-06-22\" \"2024-06-23\" #> [176] \"2024-06-24\" \"2024-06-25\" \"2024-06-26\" \"2024-06-27\" \"2024-06-28\" #> [181] \"2024-06-29\" \"2024-06-30\" \"2024-07-01\" \"2024-07-02\" \"2024-07-03\" #> [186] \"2024-07-04\" \"2024-07-05\" \"2024-07-06\" \"2024-07-07\" \"2024-07-08\" #> [191] \"2024-07-09\" \"2024-07-10\" \"2024-07-11\" \"2024-07-12\" \"2024-07-13\" #> [196] \"2024-07-14\" \"2024-07-15\" \"2024-07-16\" \"2024-07-17\" \"2024-07-18\" #> [201] \"2024-07-19\" \"2024-07-20\" \"2024-07-21\" \"2024-07-22\" \"2024-07-23\" #> [206] \"2024-07-24\" \"2024-07-25\" \"2024-07-26\" \"2024-07-27\" \"2024-07-28\" #> [211] \"2024-07-29\" \"2024-07-30\" \"2024-07-31\" \"2024-08-01\" \"2024-08-02\" #> [216] \"2024-08-03\" \"2024-08-04\" \"2024-08-05\" \"2024-08-06\" \"2024-08-07\" #> [221] \"2024-08-08\" \"2024-08-09\" \"2024-08-10\" \"2024-08-11\" \"2024-08-12\" #> [226] \"2024-08-13\" \"2024-08-14\" \"2024-08-15\" \"2024-08-16\" \"2024-08-17\" #> [231] \"2024-08-18\" \"2024-08-19\" \"2024-08-20\" \"2024-08-21\" \"2024-08-22\" #> [236] \"2024-08-23\" \"2024-08-24\" \"2024-08-25\" \"2024-08-26\" \"2024-08-27\" #> [241] \"2024-08-28\" \"2024-08-29\" \"2024-08-30\" \"2024-08-31\" \"2024-09-01\" #> [246] \"2024-09-02\" \"2024-09-03\" \"2024-09-04\" \"2024-09-05\" \"2024-09-06\" #> [251] \"2024-09-07\" \"2024-09-08\" \"2024-09-09\" \"2024-09-10\" \"2024-09-11\" #> [256] \"2024-09-12\" \"2024-09-13\" \"2024-09-14\" \"2024-09-15\" \"2024-09-16\" #> [261] \"2024-09-17\" \"2024-09-18\" \"2024-09-19\" \"2024-09-20\" \"2024-09-21\" #> [266] \"2024-09-22\" \"2024-09-23\" \"2024-09-24\" \"2024-09-25\" \"2024-09-26\" #> [271] \"2024-09-27\" \"2024-09-28\" \"2024-09-29\" \"2024-09-30\" \"2024-10-01\" #> [276] \"2024-10-02\" \"2024-10-03\" \"2024-10-04\" \"2024-10-05\" \"2024-10-06\" #> [281] \"2024-10-07\" \"2024-10-08\" \"2024-10-09\" \"2024-10-10\" \"2024-10-11\" #> [286] \"2024-10-12\" \"2024-10-13\" \"2024-10-14\" \"2024-10-15\" \"2024-10-16\" #> [291] \"2024-10-17\" \"2024-10-18\" \"2024-10-19\" \"2024-10-20\" \"2024-10-21\" #> [296] \"2024-10-22\" \"2024-10-23\" \"2024-10-24\" \"2024-10-25\" \"2024-10-26\" #> [301] \"2024-10-27\" \"2024-10-28\" \"2024-10-29\" \"2024-10-30\" \"2024-10-31\" #> [306] \"2024-11-01\" \"2024-11-02\" \"2024-11-03\" \"2024-11-04\" \"2024-11-05\" #> [311] \"2024-11-06\" \"2024-11-07\" \"2024-11-08\" \"2024-11-09\" \"2024-11-10\" #> [316] \"2024-11-11\" \"2024-11-12\" \"2024-11-13\" \"2024-11-14\" \"2024-11-15\" #> [321] \"2024-11-16\" \"2024-11-17\" \"2024-11-18\" \"2024-11-19\" \"2024-11-20\" #> [326] \"2024-11-21\" \"2024-11-22\" \"2024-11-23\" \"2024-11-24\" \"2024-11-25\" #> [331] \"2024-11-26\" \"2024-11-27\" \"2024-11-28\" \"2024-11-29\" \"2024-11-30\" #> [336] \"2024-12-05\" \"2024-12-06\" \"2024-12-07\" \"2024-12-08\" \"2024-12-09\" #> [341] \"2024-12-10\" \"2024-12-11\" \"2024-12-12\" \"2024-12-13\" \"2024-12-15\" #> [346] \"2024-12-16\" \"2024-12-17\" \"2024-12-18\" \"2024-12-19\"  # Find only missing weekdays (Monday to Friday) find_missing_dates(ret_files, full_week = FALSE) #>   [1] \"2024-01-01\" \"2024-01-02\" \"2024-01-03\" \"2024-01-04\" \"2024-01-05\" #>   [6] \"2024-01-08\" \"2024-01-09\" \"2024-01-10\" \"2024-01-11\" \"2024-01-12\" #>  [11] \"2024-01-15\" \"2024-01-16\" \"2024-01-17\" \"2024-01-18\" \"2024-01-19\" #>  [16] \"2024-01-22\" \"2024-01-23\" \"2024-01-24\" \"2024-01-25\" \"2024-01-26\" #>  [21] \"2024-01-29\" \"2024-01-30\" \"2024-01-31\" \"2024-02-01\" \"2024-02-02\" #>  [26] \"2024-02-05\" \"2024-02-06\" \"2024-02-07\" \"2024-02-08\" \"2024-02-09\" #>  [31] \"2024-02-12\" \"2024-02-13\" \"2024-02-14\" \"2024-02-15\" \"2024-02-16\" #>  [36] \"2024-02-19\" \"2024-02-20\" \"2024-02-21\" \"2024-02-22\" \"2024-02-23\" #>  [41] \"2024-02-26\" \"2024-02-27\" \"2024-02-28\" \"2024-02-29\" \"2024-03-01\" #>  [46] \"2024-03-04\" \"2024-03-05\" \"2024-03-06\" \"2024-03-07\" \"2024-03-08\" #>  [51] \"2024-03-11\" \"2024-03-12\" \"2024-03-13\" \"2024-03-14\" \"2024-03-15\" #>  [56] \"2024-03-18\" \"2024-03-19\" \"2024-03-20\" \"2024-03-21\" \"2024-03-22\" #>  [61] \"2024-03-25\" \"2024-03-26\" \"2024-03-27\" \"2024-03-28\" \"2024-03-29\" #>  [66] \"2024-04-01\" \"2024-04-02\" \"2024-04-03\" \"2024-04-04\" \"2024-04-05\" #>  [71] \"2024-04-08\" \"2024-04-09\" \"2024-04-10\" \"2024-04-11\" \"2024-04-12\" #>  [76] \"2024-04-15\" \"2024-04-16\" \"2024-04-17\" \"2024-04-18\" \"2024-04-19\" #>  [81] \"2024-04-22\" \"2024-04-23\" \"2024-04-24\" \"2024-04-25\" \"2024-04-26\" #>  [86] \"2024-04-29\" \"2024-04-30\" \"2024-05-01\" \"2024-05-02\" \"2024-05-03\" #>  [91] \"2024-05-06\" \"2024-05-07\" \"2024-05-08\" \"2024-05-09\" \"2024-05-10\" #>  [96] \"2024-05-13\" \"2024-05-14\" \"2024-05-15\" \"2024-05-16\" \"2024-05-17\" #> [101] \"2024-05-20\" \"2024-05-21\" \"2024-05-22\" \"2024-05-23\" \"2024-05-24\" #> [106] \"2024-05-27\" \"2024-05-28\" \"2024-05-29\" \"2024-05-30\" \"2024-05-31\" #> [111] \"2024-06-03\" \"2024-06-04\" \"2024-06-05\" \"2024-06-06\" \"2024-06-07\" #> [116] \"2024-06-10\" \"2024-06-11\" \"2024-06-12\" \"2024-06-13\" \"2024-06-14\" #> [121] \"2024-06-17\" \"2024-06-18\" \"2024-06-19\" \"2024-06-20\" \"2024-06-21\" #> [126] \"2024-06-24\" \"2024-06-25\" \"2024-06-26\" \"2024-06-27\" \"2024-06-28\" #> [131] \"2024-07-01\" \"2024-07-02\" \"2024-07-03\" \"2024-07-04\" \"2024-07-05\" #> [136] \"2024-07-08\" \"2024-07-09\" \"2024-07-10\" \"2024-07-11\" \"2024-07-12\" #> [141] \"2024-07-15\" \"2024-07-16\" \"2024-07-17\" \"2024-07-18\" \"2024-07-19\" #> [146] \"2024-07-22\" \"2024-07-23\" \"2024-07-24\" \"2024-07-25\" \"2024-07-26\" #> [151] \"2024-07-29\" \"2024-07-30\" \"2024-07-31\" \"2024-08-01\" \"2024-08-02\" #> [156] \"2024-08-05\" \"2024-08-06\" \"2024-08-07\" \"2024-08-08\" \"2024-08-09\" #> [161] \"2024-08-12\" \"2024-08-13\" \"2024-08-14\" \"2024-08-15\" \"2024-08-16\" #> [166] \"2024-08-19\" \"2024-08-20\" \"2024-08-21\" \"2024-08-22\" \"2024-08-23\" #> [171] \"2024-08-26\" \"2024-08-27\" \"2024-08-28\" \"2024-08-29\" \"2024-08-30\" #> [176] \"2024-09-02\" \"2024-09-03\" \"2024-09-04\" \"2024-09-05\" \"2024-09-06\" #> [181] \"2024-09-09\" \"2024-09-10\" \"2024-09-11\" \"2024-09-12\" \"2024-09-13\" #> [186] \"2024-09-16\" \"2024-09-17\" \"2024-09-18\" \"2024-09-19\" \"2024-09-20\" #> [191] \"2024-09-23\" \"2024-09-24\" \"2024-09-25\" \"2024-09-26\" \"2024-09-27\" #> [196] \"2024-09-30\" \"2024-10-01\" \"2024-10-02\" \"2024-10-03\" \"2024-10-04\" #> [201] \"2024-10-07\" \"2024-10-08\" \"2024-10-09\" \"2024-10-10\" \"2024-10-11\" #> [206] \"2024-10-14\" \"2024-10-15\" \"2024-10-16\" \"2024-10-17\" \"2024-10-18\" #> [211] \"2024-10-21\" \"2024-10-22\" \"2024-10-23\" \"2024-10-24\" \"2024-10-25\" #> [216] \"2024-10-28\" \"2024-10-29\" \"2024-10-30\" \"2024-10-31\" \"2024-11-01\" #> [221] \"2024-11-04\" \"2024-11-05\" \"2024-11-06\" \"2024-11-07\" \"2024-11-08\" #> [226] \"2024-11-11\" \"2024-11-12\" \"2024-11-13\" \"2024-11-14\" \"2024-11-15\" #> [231] \"2024-11-18\" \"2024-11-19\" \"2024-11-20\" \"2024-11-21\" \"2024-11-22\" #> [236] \"2024-11-25\" \"2024-11-26\" \"2024-11-27\" \"2024-11-28\" \"2024-11-29\" #> [241] \"2024-12-05\" \"2024-12-06\" \"2024-12-09\" \"2024-12-10\" \"2024-12-11\" #> [246] \"2024-12-12\" \"2024-12-13\" \"2024-12-16\" \"2024-12-17\" \"2024-12-18\" #> [251] \"2024-12-19\""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_fabb_xml_to_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process GME DAM Fabbisogno XML Data — gme_dam_fabb_xml_to_data","title":"Process GME DAM Fabbisogno XML Data — gme_dam_fabb_xml_to_data","text":"function processes GME Day-Ahead Market (DAM) fabissogno XML file extracts structured data, converting tidy data.table format. dynamically parses quantity fields, standardizes names, reshapes data long format.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_fabb_xml_to_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process GME DAM Fabbisogno XML Data — gme_dam_fabb_xml_to_data","text":"","code":"gme_dam_fabb_xml_to_data(xml_file_path)"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_fabb_xml_to_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process GME DAM Fabbisogno XML Data — gme_dam_fabb_xml_to_data","text":"xml_file_path string specifying file path XML file containing quantity data.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_fabb_xml_to_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process GME DAM Fabbisogno XML Data — gme_dam_fabb_xml_to_data","text":"data.table long format following columns: DATE: Date record (Date object). MARKET: Market type, typically MGP. TIME: Hour/minutes record (datetime). HOUR: Hour record (integer). ZONE: Zone region (e.g., CSUD, CALA). VALUE: Numeric value quantity MWh. UNIT: Unit value, default MWh.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_fabb_xml_to_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process GME DAM Fabbisogno XML Data — gme_dam_fabb_xml_to_data","text":"function performs following steps: Reads XML file locates Fabbisogno nodes. Extracts key fields (Data, Mercato, Ora) dynamically captures quantity-related fields. Converts commas values dots numeric compatibility. Creates wide-format data.table standardized column names. Reshapes data long format better analysis visualization.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_fabb_xml_to_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process GME DAM Fabbisogno XML Data — gme_dam_fabb_xml_to_data","text":"","code":"if (FALSE) { # \\dontrun{ # Process an XML file file_path <- \"path/to/MGPFabbisogno.xml\" fabb_data <- gme_dam_fabb_xml_to_data(file_path) head(fabb_data) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_limtran_xml_to_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process GME DAM Limiti Transiti XML Data — gme_dam_limtran_xml_to_data","title":"Process GME DAM Limiti Transiti XML Data — gme_dam_limtran_xml_to_data","text":"function processes GME Day-Ahead Market (DAM) Limiti Transiti XML file extracts structured data, converting tidy data.table format. dynamically parses quantity fields, standardizes names, reshapes data long format.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_limtran_xml_to_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process GME DAM Limiti Transiti XML Data — gme_dam_limtran_xml_to_data","text":"","code":"gme_dam_limtran_xml_to_data(xml_file_path)"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_limtran_xml_to_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process GME DAM Limiti Transiti XML Data — gme_dam_limtran_xml_to_data","text":"xml_file_path string specifying file path XML file containing quantity data.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_limtran_xml_to_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process GME DAM Limiti Transiti XML Data — gme_dam_limtran_xml_to_data","text":"data.table long format following columns: DATE: Date record (Date object). MARKET: Market type, typically MGP. TIME: Hour/minutes record (datetime). HOUR: Hour record (integer). ZONE: Zone region (e.g., CSUD, CALA). VALUE: Numeric value quantity MWh. UNIT: Unit value, default MWh.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_limtran_xml_to_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process GME DAM Limiti Transiti XML Data — gme_dam_limtran_xml_to_data","text":"function performs following steps: Reads XML file locates Limiti Transiti nodes. Extracts key fields (Data, Mercato, Ora) dynamically captures quantity-related fields. Converts commas values dots numeric compatibility. Creates wide-format data.table standardized column names. Reshapes data long format better analysis visualization.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_limtran_xml_to_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process GME DAM Limiti Transiti XML Data — gme_dam_limtran_xml_to_data","text":"","code":"if (FALSE) { # \\dontrun{ # Process an XML file file_path <- \"path/to/MGPTransiti.xml\" transit_data <- gme_dam_tran_xml_to_data(file_path) head(transit_data) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_liq_xml_to_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process GME DAM Liquidity XML Data — gme_dam_liq_xml_to_data","title":"Process GME DAM Liquidity XML Data — gme_dam_liq_xml_to_data","text":"function processes GME Day-Ahead Market (DAM) Liquidity XML file extracts structured data, converting tidy data.table format. dynamically parses quantity fields, standardizes names, reshapes data long format.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_liq_xml_to_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process GME DAM Liquidity XML Data — gme_dam_liq_xml_to_data","text":"","code":"gme_dam_liq_xml_to_data(xml_file_path)"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_liq_xml_to_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process GME DAM Liquidity XML Data — gme_dam_liq_xml_to_data","text":"xml_file_path string specifying file path XML file containing quantity data.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_liq_xml_to_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process GME DAM Liquidity XML Data — gme_dam_liq_xml_to_data","text":"data.table long format following columns: DATE: Date record (Date object). MARKET: Market type, typically MGP. TIME: Hour/minutes record (datetime). HOUR: Hour record (integer). ZONE: Zone region (e.g., CSUD, CALA). VALUE: Numeric value quantity MWh. UNIT: Unit value, default MWh.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_liq_xml_to_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process GME DAM Liquidity XML Data — gme_dam_liq_xml_to_data","text":"function performs following steps: Reads XML file locates Quantita nodes. Extracts key fields (Data, Mercato, Ora) dynamically captures quantity-related fields. Converts commas values dots numeric compatibility. Creates wide-format data.table standardized column names. Reshapes data long format better analysis visualization.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_liq_xml_to_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process GME DAM Liquidity XML Data — gme_dam_liq_xml_to_data","text":"","code":"if (FALSE) { # \\dontrun{ # Process an XML file file_path <- \"path/to/MGPLiquidity.xml\" liquidity_data <- gme_dam_liq_xml_to_data(file_path) head(liquidity_data) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_quantity_xml_to_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process GME DAM Quantity XML Data — gme_dam_quantity_xml_to_data","title":"Process GME DAM Quantity XML Data — gme_dam_quantity_xml_to_data","text":"function processes GME Day-Ahead Market (DAM) quantity XML file extracts structured data, converting tidy data.table format. dynamically parses quantity fields, standardizes names, reshapes data long format.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_quantity_xml_to_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process GME DAM Quantity XML Data — gme_dam_quantity_xml_to_data","text":"","code":"gme_dam_quantity_xml_to_data(xml_file_path)"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_quantity_xml_to_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process GME DAM Quantity XML Data — gme_dam_quantity_xml_to_data","text":"xml_file_path string specifying file path XML file containing quantity data.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_quantity_xml_to_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process GME DAM Quantity XML Data — gme_dam_quantity_xml_to_data","text":"data.table long format following columns: DATE: Date record (Date object). MARKET: Market type, typically MGP. HOUR: Hour record (integer). ZONE: Zone region (e.g., CSUD, CALA). VALUE: Numeric value quantity MWh. UNIT: Unit value, default MWh.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_quantity_xml_to_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process GME DAM Quantity XML Data — gme_dam_quantity_xml_to_data","text":"function performs following steps: Reads XML file locates Liquidita nodes. Extracts key fields (Data, Mercato, Ora) dynamically captures quantity-related fields. Converts commas values dots numeric compatibility. Creates wide-format data.table standardized column names. Reshapes data long format better analysis visualization.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_quantity_xml_to_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process GME DAM Quantity XML Data — gme_dam_quantity_xml_to_data","text":"","code":"if (FALSE) { # \\dontrun{ # Process an XML file file_path <- \"path/to/MGPQuantita.xml\" quantita_data <- gme_dam_quantity_xml_to_data(file_path) head(quantita_data) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_tran_xml_to_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process GME DAM Transiti XML Data — gme_dam_tran_xml_to_data","title":"Process GME DAM Transiti XML Data — gme_dam_tran_xml_to_data","text":"function processes GME Day-Ahead Market (DAM) Transiti XML file extracts structured data, converting tidy data.table format. dynamically parses quantity fields, standardizes names, reshapes data long format.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_tran_xml_to_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process GME DAM Transiti XML Data — gme_dam_tran_xml_to_data","text":"","code":"gme_dam_tran_xml_to_data(xml_file_path)"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_tran_xml_to_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process GME DAM Transiti XML Data — gme_dam_tran_xml_to_data","text":"xml_file_path string specifying file path XML file containing quantity data.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_tran_xml_to_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process GME DAM Transiti XML Data — gme_dam_tran_xml_to_data","text":"data.table long format following columns: DATE: Date record (Date object). MARKET: Market type, typically MGP. TIME: Hour/minutes record (datetime). HOUR: Hour record (integer). ZONE: Zone region (e.g., CSUD, CALA). VALUE: Numeric value quantity MWh. UNIT: Unit value, default MWh.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_tran_xml_to_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process GME DAM Transiti XML Data — gme_dam_tran_xml_to_data","text":"function performs following steps: Reads XML file locates Transiti nodes. Extracts key fields (Data, Mercato, Ora) dynamically captures quantity-related fields. Converts commas values dots numeric compatibility. Creates wide-format data.table standardized column names. Reshapes data long format better analysis visualization.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_dam_tran_xml_to_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process GME DAM Transiti XML Data — gme_dam_tran_xml_to_data","text":"","code":"if (FALSE) { # \\dontrun{ # Process an XML file file_path <- \"path/to/MGPTransiti.xml\" transit_data <- gme_dam_tran_xml_to_data(file_path) head(transit_data) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_download_offers_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and Process MGP Data File — gme_download_offers_file","title":"Download and Process MGP Data File — gme_download_offers_file","text":"function downloads file FTP server using provided credentials, processes XML data downloaded file, returns processed data. processing, downloaded XML file deleted.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_download_offers_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and Process MGP Data File — gme_download_offers_file","text":"","code":"gme_download_offers_file(   filename,   data_type = \"MGP\",   output_dir,   username,   password,   raw = FALSE )"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_download_offers_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and Process MGP Data File — gme_download_offers_file","text":"filename character string representing name file downloaded. output_dir character string representing directory downloaded file saved. username character string representing FTP username authentication. password character string representing FTP password authentication.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_download_offers_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and Process MGP Data File — gme_download_offers_file","text":"data frame (NULL case error). data frame contains processed data obtained downloaded XML file, NULL error occurred download processing.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_download_offers_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download and Process MGP Data File — gme_download_offers_file","text":"function uses curl package download file FTP server provided credentials. downloading, passes downloaded file gme_dam_xml_to_data function processing. Finally, downloaded XML file deleted local system clean .","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_download_offers_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and Process MGP Data File — gme_download_offers_file","text":"","code":"# Example usage: result <- mgp_download_file(\"example.xml\", \"your_username\", \"your_password\", \"/path/to/output_dir\") #> Error in mgp_download_file(\"example.xml\", \"your_username\", \"your_password\",     \"/path/to/output_dir\"): Invalid data_type: your_username . Must be one of: MGP_Prezzi, MGP_Quantita, MGP_Fabbisogno, MGP_Liquidita, MGP_Transiti, MGP_LimitiTransito print(result) #> Error: object 'result' not found"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_get_directory.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve FTP Directory Listing from GME — gme_get_directory","title":"Retrieve FTP Directory Listing from GME — gme_get_directory","text":"function connects GME FTP server retrieves directory listing.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_get_directory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve FTP Directory Listing from GME — gme_get_directory","text":"","code":"gme_get_directory(username = \"PIASARACENO\", password = \"18N15C9R\")"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_get_directory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve FTP Directory Listing from GME — gme_get_directory","text":"username FTP username. Default \"PIASARACENO\". password FTP password. Default \"18N15C9R\".","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_get_directory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve FTP Directory Listing from GME — gme_get_directory","text":"data.table containing directory listing.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_get_directory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve FTP Directory Listing from GME — gme_get_directory","text":"","code":"if (FALSE) { # \\dontrun{ file_dt = gme_get_directory() print(file_dt) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_igi_get_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Files from GME FTP Server for DAM market — gme_igi_get_files","title":"Retrieve Files from GME FTP Server for DAM market — gme_igi_get_files","text":"function connects GME FTP server list XML files available specified directory. can filter files based provided data_type.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_igi_get_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Files from GME FTP Server for DAM market — gme_igi_get_files","text":"","code":"gme_igi_get_files(   data_type,   output_dir = \"data\",   username = \"PIASARACENO\",   password = \"18N15C9R\",   verbose = FALSE,   storico = FALSE,   n = 1 )"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_igi_get_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Files from GME FTP Server for DAM market — gme_igi_get_files","text":"data_type string specifying data type directory query. Default \"MGP_Prezzi\". Can customized directories. output_dir string specifying directory output files saved. Default \"data\". directory exist, created. username FTP server username. Default \"PIASARACENO\". password FTP server password. Default \"18N15C9R\". verbose Logical. TRUE, prints list available files. Default FALSE.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_igi_get_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Files from GME FTP Server for DAM market — gme_igi_get_files","text":"character vector containing filenames match specified pattern, NULL error occurs.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_igi_get_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Files from GME FTP Server for DAM market — gme_igi_get_files","text":"","code":"if (FALSE) { # \\dontrun{ files <- gme_mgp_get_files(data_type = \"MGP_Prezzi\", verbose = TRUE) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mb_as_xml_to_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process GME Other Markets MS AS XML Data — gme_mb_as_xml_to_data","title":"Process GME Other Markets MS AS XML Data — gme_mb_as_xml_to_data","text":"function processes GME Markets MS XML file extracts structured data, converting tidy data.table format. dynamically parses quantity fields, standardizes names, reshapes data long format.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mb_as_xml_to_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process GME Other Markets MS AS XML Data — gme_mb_as_xml_to_data","text":"","code":"gme_mb_as_xml_to_data(xml_file_path)"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mb_as_xml_to_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process GME Other Markets MS AS XML Data — gme_mb_as_xml_to_data","text":"xml_file_path string specifying file path XML file containing quantity data.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mb_as_xml_to_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process GME Other Markets MS AS XML Data — gme_mb_as_xml_to_data","text":"data.table long format following columns: DATE: Date record (Date object). MARKET: Market type, typically MS . TIME: Hour/minutes record (datetime). HOUR: Hour record (integer). ZONE: Zone region (e.g., CSUD, CALA). VALUE: Numeric value quantity MWh. UNIT: Unit value, default MWh.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mb_as_xml_to_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process GME Other Markets MS AS XML Data — gme_mb_as_xml_to_data","text":"function performs following steps: Reads XML file locates MS nodes. Extracts key fields (Data, Mercato, Ora) dynamically captures quantity-related fields. Converts commas values dots numeric compatibility. Creates wide-format data.table standardized column names. Reshapes data long format better analysis visualization.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mb_as_xml_to_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process GME Other Markets MS AS XML Data — gme_mb_as_xml_to_data","text":"","code":"if (FALSE) { # \\dontrun{ # Process an XML file file_path <- \"path/to/MB_PRiservaSecondaria.xml\" transit_data <- gme_mb_rs_xml_to_data(file_path) head(transit_data) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mb_rs_xml_to_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process GME Other Markets MB RS XML Data — gme_mb_rs_xml_to_data","title":"Process GME Other Markets MB RS XML Data — gme_mb_rs_xml_to_data","text":"function processes GME Markets MB RS XML file extracts structured data, converting tidy data.table format. dynamically parses quantity fields, standardizes names, reshapes data long format.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mb_rs_xml_to_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process GME Other Markets MB RS XML Data — gme_mb_rs_xml_to_data","text":"","code":"gme_mb_rs_xml_to_data(xml_file_path)"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mb_rs_xml_to_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process GME Other Markets MB RS XML Data — gme_mb_rs_xml_to_data","text":"xml_file_path string specifying file path XML file containing quantity data.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mb_rs_xml_to_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process GME Other Markets MB RS XML Data — gme_mb_rs_xml_to_data","text":"data.table long format following columns: DATE: Date record (Date object). MARKET: Market type, typically MB RS. TIME: Hour/minutes record (datetime). HOUR: Hour record (integer). ZONE: Zone region (e.g., CSUD, CALA). VALUE: Numeric value quantity MWh. UNIT: Unit value, default MWh.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mb_rs_xml_to_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process GME Other Markets MB RS XML Data — gme_mb_rs_xml_to_data","text":"function performs following steps: Reads XML file locates MB RS nodes. Extracts key fields (Data, Mercato, Ora) dynamically captures quantity-related fields. Converts commas values dots numeric compatibility. Creates wide-format data.table standardized column names. Reshapes data long format better analysis visualization.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mb_rs_xml_to_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process GME Other Markets MB RS XML Data — gme_mb_rs_xml_to_data","text":"","code":"if (FALSE) { # \\dontrun{ # Process an XML file file_path <- \"path/to/MB_PRiservaSecondaria.xml\" transit_data <- gme_mb_rs_xml_to_data(file_path) head(transit_data) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mb_tl_xml_to_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process GME Other Markets MB Totali XML Data — gme_mb_tl_xml_to_data","title":"Process GME Other Markets MB Totali XML Data — gme_mb_tl_xml_to_data","text":"function processes GME Markets MB Totali XML file extracts structured data, converting tidy data.table format. dynamically parses quantity fields, standardizes names, reshapes data long format.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mb_tl_xml_to_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process GME Other Markets MB Totali XML Data — gme_mb_tl_xml_to_data","text":"","code":"gme_mb_tl_xml_to_data(xml_file_path)"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mb_tl_xml_to_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process GME Other Markets MB Totali XML Data — gme_mb_tl_xml_to_data","text":"xml_file_path string specifying file path XML file containing quantity data.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mb_tl_xml_to_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process GME Other Markets MB Totali XML Data — gme_mb_tl_xml_to_data","text":"data.table long format following columns: DATE: Date record (Date object). MARKET: Market type, typically MB Totali. TIME: Hour/minutes record (datetime). HOUR: Hour record (integer). ZONE: Zone region (e.g., CSUD, CALA). VALUE: Numeric value quantity MWh. UNIT: Unit value, default MWh.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mb_tl_xml_to_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process GME Other Markets MB Totali XML Data — gme_mb_tl_xml_to_data","text":"function performs following steps: Reads XML file locates MSD nodes. Extracts key fields (Data, Mercato, Ora) dynamically captures quantity-related fields. Converts commas values dots numeric compatibility. Creates wide-format data.table standardized column names. Reshapes data long format better analysis visualization.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mb_tl_xml_to_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process GME Other Markets MB Totali XML Data — gme_mb_tl_xml_to_data","text":"","code":"if (FALSE) { # \\dontrun{ # Process an XML file file_path <- \"path/to/MBPTotali.xml\" transit_data <- gme_mb_tl_xml_to_data(file_path) head(transit_data) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mgp_get_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Files from GME FTP Server for DAM market — gme_mgp_get_files","title":"Retrieve Files from GME FTP Server for DAM market — gme_mgp_get_files","text":"function connects GME FTP server list XML files available specified directory. can filter files based provided data_type.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mgp_get_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Files from GME FTP Server for DAM market — gme_mgp_get_files","text":"","code":"gme_mgp_get_files(   data_type,   output_dir = \"data\",   username = \"PIASARACENO\",   password = \"18N15C9R\",   verbose = FALSE )"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mgp_get_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Files from GME FTP Server for DAM market — gme_mgp_get_files","text":"data_type string specifying data type directory query. Default \"MGP_Prezzi\". Can customized directories. output_dir string specifying directory output files saved. Default \"data\". directory exist, created. username FTP server username. Default \"PIASARACENO\". password FTP server password. Default \"18N15C9R\". verbose Logical. TRUE, prints list available files. Default FALSE.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mgp_get_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Files from GME FTP Server for DAM market — gme_mgp_get_files","text":"character vector containing filenames match specified pattern, NULL error occurs.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_mgp_get_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Files from GME FTP Server for DAM market — gme_mgp_get_files","text":"","code":"if (FALSE) { # \\dontrun{ files <- gme_mgp_get_files(data_type = \"MGP_Prezzi\", verbose = TRUE) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_msd_all_xml_to_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process GME Other Markets MSD XML Data — gme_msd_all_xml_to_data","title":"Process GME Other Markets MSD XML Data — gme_msd_all_xml_to_data","text":"function processes GME Markets MSD XML file extracts structured data, converting tidy data.table format. dynamically parses quantity fields, standardizes names, reshapes data long format.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_msd_all_xml_to_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process GME Other Markets MSD XML Data — gme_msd_all_xml_to_data","text":"","code":"gme_msd_all_xml_to_data(xml_file_path)"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_msd_all_xml_to_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process GME Other Markets MSD XML Data — gme_msd_all_xml_to_data","text":"xml_file_path string specifying file path XML file containing quantity data.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_msd_all_xml_to_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process GME Other Markets MSD XML Data — gme_msd_all_xml_to_data","text":"data.table long format following columns: DATE: Date record (Date object). MARKET: Market type, typically MSD. TIME: Hour/minutes record (datetime). HOUR: Hour record (integer). ZONE: Zone region (e.g., CSUD, CALA). VALUE: Numeric value quantity MWh. UNIT: Unit value, default MWh.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_msd_all_xml_to_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process GME Other Markets MSD XML Data — gme_msd_all_xml_to_data","text":"function performs following steps: Reads XML file locates MSD nodes. Extracts key fields (Data, Mercato, Ora) dynamically captures quantity-related fields. Converts commas values dots numeric compatibility. Creates wide-format data.table standardized column names. Reshapes data long format better analysis visualization.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_msd_all_xml_to_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process GME Other Markets MSD XML Data — gme_msd_all_xml_to_data","text":"","code":"if (FALSE) { # \\dontrun{ # Process an XML file file_path <- \"path/to/MSD_ServiziDispacciamento.xml\" transit_data <- gme_msd_all_xml_to_data(file_path) head(transit_data) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_offers_get_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Files from GME FTP Server for DAM market pubblic offers — gme_offers_get_files","title":"Retrieve Files from GME FTP Server for DAM market pubblic offers — gme_offers_get_files","text":"function connects GME FTP server list XML files available specified directory. can filter files based provided data_type.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_offers_get_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Files from GME FTP Server for DAM market pubblic offers — gme_offers_get_files","text":"","code":"gme_offers_get_files(   data_type,   output_dir = \"data\",   username = \"PIASARACENO\",   password = \"18N15C9R\",   verbose = FALSE )"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_offers_get_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Files from GME FTP Server for DAM market pubblic offers — gme_offers_get_files","text":"data_type string specifying data type directory query. Default \"MGP_Prezzi\". Can customized directories. output_dir string specifying directory output files saved. Default \"data\". directory exist, created. username FTP server username. Default \"PIASARACENO\". password FTP server password. Default \"18N15C9R\". verbose Logical. TRUE, prints list available files. Default FALSE.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_offers_get_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Files from GME FTP Server for DAM market pubblic offers — gme_offers_get_files","text":"character vector containing filenames match specified pattern, NULL error occurs.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_offers_get_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Files from GME FTP Server for DAM market pubblic offers — gme_offers_get_files","text":"","code":"if (FALSE) { # \\dontrun{ files <- gme_mgp_get_files(data_type = \"MGP_Prezzi\", verbose = TRUE) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_other_download_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and Process Other Markets Data File — gme_other_download_file","title":"Download and Process Other Markets Data File — gme_other_download_file","text":"function downloads file FTP server using provided credentials, processes XML data downloaded file, returns processed data. processing, downloaded XML file deleted.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_other_download_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and Process Other Markets Data File — gme_other_download_file","text":"","code":"gme_other_download_file(   filename,   data_type = \"MSD_ServiziDispacciamento\",   output_dir,   username,   password,   raw = FALSE )"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_other_download_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and Process Other Markets Data File — gme_other_download_file","text":"filename character string representing name file downloaded. output_dir character string representing directory downloaded file saved. username character string representing FTP username authentication. password character string representing FTP password authentication.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_other_download_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and Process Other Markets Data File — gme_other_download_file","text":"data frame (NULL case error). data frame contains processed data obtained downloaded XML file, NULL error occurred download processing.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_other_download_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download and Process Other Markets Data File — gme_other_download_file","text":"function uses curl package download file FTP server provided credentials. downloading, passes downloaded file gme_dam_xml_to_data function processing. Finally, downloaded XML file deleted local system clean .","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_other_download_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and Process Other Markets Data File — gme_other_download_file","text":"","code":"# Example usage: result <- gmeother_download_file(\"example.xml\", \"your_username\", \"your_password\", \"/path/to/output_dir\") #> Error in gmeother_download_file(\"example.xml\", \"your_username\", \"your_password\",     \"/path/to/output_dir\"): could not find function \"gmeother_download_file\" print(result) #> Error: object 'result' not found"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_rest_get_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Files from GME FTP Server for Other markets — gme_rest_get_files","title":"Retrieve Files from GME FTP Server for Other markets — gme_rest_get_files","text":"function connects GME FTP server list XML files available specified directory. can filter files based provided data_type.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_rest_get_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Files from GME FTP Server for Other markets — gme_rest_get_files","text":"","code":"gme_rest_get_files(   data_type,   output_dir = \"data\",   username = \"PIASARACENO\",   password = \"18N15C9R\",   verbose = FALSE )"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_rest_get_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Files from GME FTP Server for Other markets — gme_rest_get_files","text":"data_type string specifying data type directory query. Default \"MGP_Prezzi\". Can customized directories. output_dir string specifying directory output files saved. Default \"data\". directory exist, created. username FTP server username. Default \"PIASARACENO\". password FTP server password. Default \"18N15C9R\". verbose Logical. TRUE, prints list available files. Default FALSE.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_rest_get_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Files from GME FTP Server for Other markets — gme_rest_get_files","text":"character vector containing filenames match specified pattern, NULL error occurs.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_rest_get_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Files from GME FTP Server for Other markets — gme_rest_get_files","text":"","code":"if (FALSE) { # \\dontrun{ files <- gme_mgp_get_files(data_type = \"MGP_Prezzi\", verbose = TRUE) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_validate_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Filename Structure — gme_validate_filename","title":"Validate Filename Structure — gme_validate_filename","text":"function checks whether given filename matches specific structure based number leading digits, middle expression, file extension.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_validate_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Filename Structure — gme_validate_filename","text":"","code":"gme_validate_filename(filename, num_digits = 8, file_extension = \"xml\")"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_validate_filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Filename Structure — gme_validate_filename","text":"filename string representing filename validate. num_digits integer specifying number leading digits filename. Default 8. file_extension string specifying expected file extension (without dot). Default \"xml\". middle_expression string specifying exact middle expression filename. Default \"MGPPrezzi\".","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_validate_filename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Filename Structure — gme_validate_filename","text":"logical value (TRUE filename valid, FALSE otherwise). filename invalid, prints \"Wrong filename\" console.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_validate_filename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Filename Structure — gme_validate_filename","text":"","code":"# Validate a correctly formatted filename gme_validate_filename(\"20241126MGPPrezzi.xml\") # Returns TRUE #> [1] TRUE  # Validate an incorrectly formatted filename gme_validate_filename(\"wrongfile.xml\") # Prints \"Wrong filename\" and returns FALSE #> Wrong filename  #>  #> [1] FALSE  # Validate with custom parameters gme_validate_filename(\"2024MGPPrezzi.txt\", num_digits = 4, file_extension = \"txt\") # Returns TRUE #> [1] TRUE"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_xbid_all_xml_to_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process GME Other Markets XBID XML Data — gme_xbid_all_xml_to_data","title":"Process GME Other Markets XBID XML Data — gme_xbid_all_xml_to_data","text":"function processes GME Markets MSD XML file extracts structured data, converting tidy data.table format. dynamically parses quantity fields, standardizes names, reshapes data long format.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_xbid_all_xml_to_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process GME Other Markets XBID XML Data — gme_xbid_all_xml_to_data","text":"","code":"gme_xbid_all_xml_to_data(xml_file_path)"},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_xbid_all_xml_to_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process GME Other Markets XBID XML Data — gme_xbid_all_xml_to_data","text":"xml_file_path string specifying file path XML file containing quantity data.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_xbid_all_xml_to_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process GME Other Markets XBID XML Data — gme_xbid_all_xml_to_data","text":"data.table long format following columns: DATE: Date record (Date object). MARKET: Market type, typically XBID. TIME: Hour/minutes record (datetime). HOUR: Hour record (integer). ZONE: Zone region (e.g., CSUD, CALA). VALUE: Numeric value quantity MWh. UNIT: Unit value, default MWh.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_xbid_all_xml_to_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process GME Other Markets XBID XML Data — gme_xbid_all_xml_to_data","text":"function performs following steps: Reads XML file locates XBID nodes. Extracts key fields (Data, Mercato, Ora) dynamically captures quantity-related fields. Converts commas values dots numeric compatibility. Creates wide-format data.table standardized column names. Reshapes data long format better analysis visualization.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/gme_xbid_all_xml_to_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process GME Other Markets XBID XML Data — gme_xbid_all_xml_to_data","text":"","code":"if (FALSE) { # \\dontrun{ # Process an XML file file_path <- \"path/to/XBID.XML\" transit_data <- gme_xbid_all_xml_to_data(file_path) head(transit_data) } # }"},{"path":"https://mbsenergy.github.io/fluxer/reference/is_holiday.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a Date is a Holiday — is_holiday","title":"Check if a Date is a Holiday — is_holiday","text":"function determines given date holiday based fixed list holidays, weekends, day Easter.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/is_holiday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a Date is a Holiday — is_holiday","text":"","code":"is_holiday(date)"},{"path":"https://mbsenergy.github.io/fluxer/reference/is_holiday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a Date is a Holiday — is_holiday","text":"date Date object representing date check.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/is_holiday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a Date is a Holiday — is_holiday","text":"logical value (TRUE FALSE). Returns TRUE date holiday, otherwise FALSE.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/is_holiday.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if a Date is a Holiday — is_holiday","text":"function checks following conditions determine date holiday: Fixed holidays (e.g., New Year's Day, Christmas). Weekends (Saturday Sunday). day Easter. Fixed holidays include: January 1st (New Year's Day) January 6th (Epiphany) April 25th (Liberation Day) May 1st (Labor Day) June 2nd (Republic Day) August 15th (Assumption Mary) November 1st (Saints' Day) December 8th (Immaculate Conception) December 25th (Christmas) December 26th (St. Stephen's Day)","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/is_holiday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a Date is a Holiday — is_holiday","text":"","code":"# Example 1: Check if a specific date is a holiday is_holiday(as.Date(\"2023-12-25\")) # Christmas - should return TRUE #> [1] TRUE  # Example 2: Check if a weekend is a holiday is_holiday(as.Date(\"2023-07-15\")) # Saturday - should return TRUE #> [1] TRUE  # Example 3: Check if a non-holiday weekday is a holiday is_holiday(as.Date(\"2023-07-13\")) # Thursday - should return FALSE #> [1] FALSE"},{"path":"https://mbsenergy.github.io/fluxer/reference/mgp_download_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Download and Process MGP Data File — mgp_download_file","title":"Download and Process MGP Data File — mgp_download_file","text":"function downloads file FTP server using provided credentials, processes XML data downloaded file, returns processed data. processing, downloaded XML file deleted.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/mgp_download_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download and Process MGP Data File — mgp_download_file","text":"","code":"mgp_download_file(   filename,   data_type = \"MGP_Prezzi\",   output_dir,   username,   password,   raw = FALSE )"},{"path":"https://mbsenergy.github.io/fluxer/reference/mgp_download_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download and Process MGP Data File — mgp_download_file","text":"filename character string representing name file downloaded. output_dir character string representing directory downloaded file saved. username character string representing FTP username authentication. password character string representing FTP password authentication.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/mgp_download_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download and Process MGP Data File — mgp_download_file","text":"data frame (NULL case error). data frame contains processed data obtained downloaded XML file, NULL error occurred download processing.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/mgp_download_file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download and Process MGP Data File — mgp_download_file","text":"function uses curl package download file FTP server provided credentials. downloading, passes downloaded file gme_dam_xml_to_data function processing. Finally, downloaded XML file deleted local system clean .","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/mgp_download_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download and Process MGP Data File — mgp_download_file","text":"","code":"# Example usage: result <- mgp_download_file(\"example.xml\", \"your_username\", \"your_password\", \"/path/to/output_dir\") #> Error in mgp_download_file(\"example.xml\", \"your_username\", \"your_password\",     \"/path/to/output_dir\"): Invalid data_type: your_username . Must be one of: MGP_Prezzi, MGP_Quantita, MGP_Fabbisogno, MGP_Liquidita, MGP_Transiti, MGP_LimitiTransito print(result) #> Error: object 'result' not found"},{"path":"https://mbsenergy.github.io/fluxer/reference/process_alba_xlsx.html","id":null,"dir":"Reference","previous_headings":"","what":"Process Excel file and extract relevant data — process_alba_xlsx","title":"Process Excel file and extract relevant data — process_alba_xlsx","text":"function processes Excel file containing multiple sheets, extracts relevant data based type commodity (gas electricity), filters data within specified date range, combines single data.table. data reshaped, cleaned, additional columns added analysis.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/process_alba_xlsx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process Excel file and extract relevant data — process_alba_xlsx","text":"","code":"process_alba_xlsx(filename, from_date, to_date, type)"},{"path":"https://mbsenergy.github.io/fluxer/reference/process_alba_xlsx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process Excel file and extract relevant data — process_alba_xlsx","text":"filename character string specifying path Excel file processed. from_date Date object character string \"YYYY-MM-DD\" format specifying start date filtering data. to_date Date object character string \"YYYY-MM-DD\" format specifying end date filtering data. type character string specifying type commodity. can either \"gas\" \"electricity\".","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/process_alba_xlsx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process Excel file and extract relevant data — process_alba_xlsx","text":"data.table containing processed data, columns: DATE: date observation. TYPE: commodity type (e.g., \"PSV\", \"COAL\"). VARIABLE: name variable (e.g., \"PSV MW\"). VALUE: value variable given date.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/process_alba_xlsx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process Excel file and extract relevant data — process_alba_xlsx","text":"function processes following sheets \"gas\" type: \"PSV MW\", \"GR04 MW\", \"TTF MW\", \"GR07 MW\", \"Baum MW\", \"NCG MW\", \"PEG MW\". \"electricity\" type, following sheets processed: \"Elettricita Italia\", \"Elettricita Francia\", \"Elettricita Germania\", \"COAL\", \"CO2\". Data filtered from_date to_date parameters, reshaped wide long format, combined single data.table.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/process_alba_xlsx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process Excel file and extract relevant data — process_alba_xlsx","text":"","code":"# Example usage: filename <- \"path/to/your/file.xlsx\" from_date <- Sys.Date() - 7 to_date <- Sys.Date() type <- \"electricity\" processed_data <- process_xlsx(filename, from_date, to_date, type) #> Error in process_xlsx(filename, from_date, to_date, type): could not find function \"process_xlsx\""},{"path":"https://mbsenergy.github.io/fluxer/reference/table_obs_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Count unique values in a column of a PostgreSQL table — table_obs_dist","title":"Count unique values in a column of a PostgreSQL table — table_obs_dist","text":"function connects PostgreSQL database, retrieves distinct values specified column table, counts occurrences.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/table_obs_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count unique values in a column of a PostgreSQL table — table_obs_dist","text":"","code":"table_obs_dist(con, table_name, column_name)"},{"path":"https://mbsenergy.github.io/fluxer/reference/table_obs_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count unique values in a column of a PostgreSQL table — table_obs_dist","text":"con DBI connection object PostgreSQL database. table_name character string specifying name table. column_name character string specifying column analyze.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/table_obs_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count unique values in a column of a PostgreSQL table — table_obs_dist","text":"data frame unique values column counts.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/to_yymm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Dates to First Day of the Month — to_yymm","title":"Convert Dates to First Day of the Month — to_yymm","text":"function transforms given date (vector dates) first day month, formatted YYYY-MM-01.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/to_yymm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Dates to First Day of the Month — to_yymm","text":"","code":"to_yymm(dates)"},{"path":"https://mbsenergy.github.io/fluxer/reference/to_yymm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Dates to First Day of the Month — to_yymm","text":"dates vector dates \"YYYY-MM-DD\" format. Can character, Date, IDate.","code":""},{"path":"https://mbsenergy.github.io/fluxer/reference/to_yymm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Dates to First Day of the Month — to_yymm","text":"vector dates converted first day respective month (IDate format).","code":""}]
